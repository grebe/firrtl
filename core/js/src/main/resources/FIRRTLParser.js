// Generated from FIRRTL.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var FIRRTLListener = require('./FIRRTLListener').FIRRTLListener;
var grammarFileName = "FIRRTL.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003v\u0244\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002;",
    "\n\u0002\u0003\u0002\u0003\u0002\u0007\u0002?\n\u0002\f\u0002\u000e",
    "\u0002B\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003J\n\u0003\u0003\u0003\u0003\u0003",
    "\u0007\u0003N\n\u0003\f\u0003\u000e\u0003Q\u000b\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003Z\n\u0003\u0003\u0003\u0003\u0003\u0007\u0003^\n\u0003\f\u0003",
    "\u000e\u0003a\u000b\u0003\u0003\u0003\u0005\u0003d\n\u0003\u0003\u0003",
    "\u0007\u0003g\n\u0003\f\u0003\u000e\u0003j\u000b\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003n\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0005\u0004u\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0081\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0088\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u008f",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0097\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u009f\n\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u00a3\n\u0006\f\u0006\u000e\u0006",
    "\u00a6\u000b\u0006\u0003\u0006\u0005\u0006\u00a9\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006\u00b0\n",
    "\u0006\f\u0006\u000e\u0006\u00b3\u000b\u0006\u0003\u0007\u0005\u0007",
    "\u00b6\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u00d9\n\t\u0003\n\u0007\n\u00dc\n\n\f\n\u000e\n\u00df",
    "\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u00ed\n\f\u0003\r\u0003\r\u0003\r\u0005\r\u00f2\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0006\r\u00f8\n\r\r\r\u000e\r\u00f9\u0003\r\u0006",
    "\r\u00fd\n\r\r\r\u000e\r\u00fe\u0003\r\u0003\r\u0005\r\u0103\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u010a",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0114\n\u000e\u0003",
    "\u000e\u0005\u000e\u0117\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u011d\n\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u0121\n\u000e\f\u000e\u000e\u000e\u0124\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u012d\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u0134\n\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u0140\n\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0147\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u014e\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u0154\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u015a\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u0160\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0169\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u0170\n\u000e\f\u000e\u000e\u000e\u0173\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0177\n\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u017b\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0006\u000e",
    "\u0180\n\u000e\r\u000e\u000e\u000e\u0181\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u0186\n\u000e\u0005\u000e\u0188\n\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0006\u000f\u01a6\n\u000f\r\u000f\u000e\u000f",
    "\u01a7\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0006",
    "\u000f\u01af\n\u000f\r\u000f\u000e\u000f\u01b0\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0006\u000f\u01b8\n\u000f\r\u000f",
    "\u000e\u000f\u01b9\u0003\u000f\u0003\u000f\u0005\u000f\u01be\n\u000f",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u01c2\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0006\u0011\u01c7\n\u0011\r\u0011\u000e\u0011\u01c8",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u01cd\n\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01d3\n\u0012\u0003\u0012",
    "\u0005\u0012\u01d6\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01dc\n\u0012\u0003\u0012\u0005\u0012\u01df\n\u0012",
    "\u0005\u0012\u01e1\n\u0012\u0005\u0012\u01e3\n\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01f1",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01fc\n",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0007\u0016\u0210\n\u0016\f\u0016\u000e\u0016\u0213\u000b\u0016",
    "\u0003\u0016\u0007\u0016\u0216\n\u0016\f\u0016\u000e\u0016\u0219\u000b",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u021d\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u022f\n\u0016\f\u0016",
    "\u000e\u0016\u0232\u000b\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0236",
    "\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u023c\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0002\u0004\n*\u001c\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.024\u0002\b\u0003\u0002\u0007\b\u0003\u00028;\u0003\u0002<>\u0003",
    "\u0002jl\r\u0002\u0003\u0003\u0005\t\f\u000f\u0014\u0014\u0017\u0018",
    "\u001c%(),,//3>BE\u0003\u0002Fi\u0002\u028f\u00026\u0003\u0002\u0002",
    "\u0002\u0004m\u0003\u0002\u0002\u0002\u0006o\u0003\u0002\u0002\u0002",
    "\bx\u0003\u0002\u0002\u0002\n\u00a8\u0003\u0002\u0002\u0002\f\u00b5",
    "\u0003\u0002\u0002\u0002\u000e\u00bb\u0003\u0002\u0002\u0002\u0010\u00d8",
    "\u0003\u0002\u0002\u0002\u0012\u00dd\u0003\u0002\u0002\u0002\u0014\u00e0",
    "\u0003\u0002\u0002\u0002\u0016\u00ec\u0003\u0002\u0002\u0002\u0018\u0102",
    "\u0003\u0002\u0002\u0002\u001a\u0187\u0003\u0002\u0002\u0002\u001c\u01bd",
    "\u0003\u0002\u0002\u0002\u001e\u01c1\u0003\u0002\u0002\u0002 \u01cc",
    "\u0003\u0002\u0002\u0002\"\u01ce\u0003\u0002\u0002\u0002$\u01e4\u0003",
    "\u0002\u0002\u0002&\u01e6\u0003\u0002\u0002\u0002(\u01e8\u0003\u0002",
    "\u0002\u0002*\u021c\u0003\u0002\u0002\u0002,\u0235\u0003\u0002\u0002",
    "\u0002.\u023b\u0003\u0002\u0002\u00020\u023d\u0003\u0002\u0002\u0002",
    "2\u023f\u0003\u0002\u0002\u00024\u0241\u0003\u0002\u0002\u000267\u0007",
    "\u0003\u0002\u000278\u0005,\u0017\u00028:\u0007\u0004\u0002\u00029;",
    "\u0005$\u0013\u0002:9\u0003\u0002\u0002\u0002:;\u0003\u0002\u0002\u0002",
    ";<\u0003\u0002\u0002\u0002<@\u0007u\u0002\u0002=?\u0005\u0004\u0003",
    "\u0002>=\u0003\u0002\u0002\u0002?B\u0003\u0002\u0002\u0002@>\u0003\u0002",
    "\u0002\u0002@A\u0003\u0002\u0002\u0002AC\u0003\u0002\u0002\u0002B@\u0003",
    "\u0002\u0002\u0002CD\u0007v\u0002\u0002D\u0003\u0003\u0002\u0002\u0002",
    "EF\u0007\u0005\u0002\u0002FG\u0005,\u0017\u0002GI\u0007\u0004\u0002",
    "\u0002HJ\u0005$\u0013\u0002IH\u0003\u0002\u0002\u0002IJ\u0003\u0002",
    "\u0002\u0002JK\u0003\u0002\u0002\u0002KO\u0007u\u0002\u0002LN\u0005",
    "\u0006\u0004\u0002ML\u0003\u0002\u0002\u0002NQ\u0003\u0002\u0002\u0002",
    "OM\u0003\u0002\u0002\u0002OP\u0003\u0002\u0002\u0002PR\u0003\u0002\u0002",
    "\u0002QO\u0003\u0002\u0002\u0002RS\u0005\u0012\n\u0002ST\u0007v\u0002",
    "\u0002Tn\u0003\u0002\u0002\u0002UV\u0007\u0006\u0002\u0002VW\u0005,",
    "\u0017\u0002WY\u0007\u0004\u0002\u0002XZ\u0005$\u0013\u0002YX\u0003",
    "\u0002\u0002\u0002YZ\u0003\u0002\u0002\u0002Z[\u0003\u0002\u0002\u0002",
    "[_\u0007u\u0002\u0002\\^\u0005\u0006\u0004\u0002]\\\u0003\u0002\u0002",
    "\u0002^a\u0003\u0002\u0002\u0002_]\u0003\u0002\u0002\u0002_`\u0003\u0002",
    "\u0002\u0002`c\u0003\u0002\u0002\u0002a_\u0003\u0002\u0002\u0002bd\u0005",
    "\u000e\b\u0002cb\u0003\u0002\u0002\u0002cd\u0003\u0002\u0002\u0002d",
    "h\u0003\u0002\u0002\u0002eg\u0005\u0010\t\u0002fe\u0003\u0002\u0002",
    "\u0002gj\u0003\u0002\u0002\u0002hf\u0003\u0002\u0002\u0002hi\u0003\u0002",
    "\u0002\u0002ik\u0003\u0002\u0002\u0002jh\u0003\u0002\u0002\u0002kl\u0007",
    "v\u0002\u0002ln\u0003\u0002\u0002\u0002mE\u0003\u0002\u0002\u0002mU",
    "\u0003\u0002\u0002\u0002n\u0005\u0003\u0002\u0002\u0002op\u0005\b\u0005",
    "\u0002pq\u0005,\u0017\u0002qr\u0007\u0004\u0002\u0002rt\u0005\n\u0006",
    "\u0002su\u0005$\u0013\u0002ts\u0003\u0002\u0002\u0002tu\u0003\u0002",
    "\u0002\u0002uv\u0003\u0002\u0002\u0002vw\u0007t\u0002\u0002w\u0007\u0003",
    "\u0002\u0002\u0002xy\t\u0002\u0002\u0002y\t\u0003\u0002\u0002\u0002",
    "z{\b\u0006\u0001\u0002{\u0080\u0007\t\u0002\u0002|}\u0007\n\u0002\u0002",
    "}~\u00050\u0019\u0002~\u007f\u0007\u000b\u0002\u0002\u007f\u0081\u0003",
    "\u0002\u0002\u0002\u0080|\u0003\u0002\u0002\u0002\u0080\u0081\u0003",
    "\u0002\u0002\u0002\u0081\u00a9\u0003\u0002\u0002\u0002\u0082\u0087\u0007",
    "\f\u0002\u0002\u0083\u0084\u0007\n\u0002\u0002\u0084\u0085\u00050\u0019",
    "\u0002\u0085\u0086\u0007\u000b\u0002\u0002\u0086\u0088\u0003\u0002\u0002",
    "\u0002\u0087\u0083\u0003\u0002\u0002\u0002\u0087\u0088\u0003\u0002\u0002",
    "\u0002\u0088\u00a9\u0003\u0002\u0002\u0002\u0089\u008e\u0007\r\u0002",
    "\u0002\u008a\u008b\u0007\n\u0002\u0002\u008b\u008c\u00050\u0019\u0002",
    "\u008c\u008d\u0007\u000b\u0002\u0002\u008d\u008f\u0003\u0002\u0002\u0002",
    "\u008e\u008a\u0003\u0002\u0002\u0002\u008e\u008f\u0003\u0002\u0002\u0002",
    "\u008f\u0096\u0003\u0002\u0002\u0002\u0090\u0091\u0007\n\u0002\u0002",
    "\u0091\u0092\u0007\n\u0002\u0002\u0092\u0093\u00050\u0019\u0002\u0093",
    "\u0094\u0007\u000b\u0002\u0002\u0094\u0095\u0007\u000b\u0002\u0002\u0095",
    "\u0097\u0003\u0002\u0002\u0002\u0096\u0090\u0003\u0002\u0002\u0002\u0096",
    "\u0097\u0003\u0002\u0002\u0002\u0097\u00a9\u0003\u0002\u0002\u0002\u0098",
    "\u00a9\u0007\u000e\u0002\u0002\u0099\u009e\u0007\u000f\u0002\u0002\u009a",
    "\u009b\u0007\n\u0002\u0002\u009b\u009c\u00050\u0019\u0002\u009c\u009d",
    "\u0007\u000b\u0002\u0002\u009d\u009f\u0003\u0002\u0002\u0002\u009e\u009a",
    "\u0003\u0002\u0002\u0002\u009e\u009f\u0003\u0002\u0002\u0002\u009f\u00a9",
    "\u0003\u0002\u0002\u0002\u00a0\u00a4\u0007\u0010\u0002\u0002\u00a1\u00a3",
    "\u0005\f\u0007\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a6",
    "\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a4\u00a5",
    "\u0003\u0002\u0002\u0002\u00a5\u00a7\u0003\u0002\u0002\u0002\u00a6\u00a4",
    "\u0003\u0002\u0002\u0002\u00a7\u00a9\u0007\u0011\u0002\u0002\u00a8z",
    "\u0003\u0002\u0002\u0002\u00a8\u0082\u0003\u0002\u0002\u0002\u00a8\u0089",
    "\u0003\u0002\u0002\u0002\u00a8\u0098\u0003\u0002\u0002\u0002\u00a8\u0099",
    "\u0003\u0002\u0002\u0002\u00a8\u00a0\u0003\u0002\u0002\u0002\u00a9\u00b1",
    "\u0003\u0002\u0002\u0002\u00aa\u00ab\f\u0003\u0002\u0002\u00ab\u00ac",
    "\u0007\u0012\u0002\u0002\u00ac\u00ad\u00050\u0019\u0002\u00ad\u00ae",
    "\u0007\u0013\u0002\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002\u00af\u00aa",
    "\u0003\u0002\u0002\u0002\u00b0\u00b3\u0003\u0002\u0002\u0002\u00b1\u00af",
    "\u0003\u0002\u0002\u0002\u00b1\u00b2\u0003\u0002\u0002\u0002\u00b2\u000b",
    "\u0003\u0002\u0002\u0002\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4\u00b6",
    "\u0007\u0014\u0002\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b5\u00b6",
    "\u0003\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00b8",
    "\u0005.\u0018\u0002\u00b8\u00b9\u0007\u0004\u0002\u0002\u00b9\u00ba",
    "\u0005\n\u0006\u0002\u00ba\r\u0003\u0002\u0002\u0002\u00bb\u00bc\u0007",
    "\u0015\u0002\u0002\u00bc\u00bd\u0007\u0016\u0002\u0002\u00bd\u00be\u0005",
    ",\u0017\u0002\u00be\u00bf\u0007t\u0002\u0002\u00bf\u000f\u0003\u0002",
    "\u0002\u0002\u00c0\u00c1\u0007\u0017\u0002\u0002\u00c1\u00c2\u0005,",
    "\u0017\u0002\u00c2\u00c3\u0007\u0016\u0002\u0002\u00c3\u00c4\u00050",
    "\u0019\u0002\u00c4\u00c5\u0007t\u0002\u0002\u00c5\u00d9\u0003\u0002",
    "\u0002\u0002\u00c6\u00c7\u0007\u0017\u0002\u0002\u00c7\u00c8\u0005,",
    "\u0017\u0002\u00c8\u00c9\u0007\u0016\u0002\u0002\u00c9\u00ca\u0007n",
    "\u0002\u0002\u00ca\u00cb\u0007t\u0002\u0002\u00cb\u00d9\u0003\u0002",
    "\u0002\u0002\u00cc\u00cd\u0007\u0017\u0002\u0002\u00cd\u00ce\u0005,",
    "\u0017\u0002\u00ce\u00cf\u0007\u0016\u0002\u0002\u00cf\u00d0\u0007m",
    "\u0002\u0002\u00d0\u00d1\u0007t\u0002\u0002\u00d1\u00d9\u0003\u0002",
    "\u0002\u0002\u00d2\u00d3\u0007\u0017\u0002\u0002\u00d3\u00d4\u0005,",
    "\u0017\u0002\u00d4\u00d5\u0007\u0016\u0002\u0002\u00d5\u00d6\u0007o",
    "\u0002\u0002\u00d6\u00d7\u0007t\u0002\u0002\u00d7\u00d9\u0003\u0002",
    "\u0002\u0002\u00d8\u00c0\u0003\u0002\u0002\u0002\u00d8\u00c6\u0003\u0002",
    "\u0002\u0002\u00d8\u00cc\u0003\u0002\u0002\u0002\u00d8\u00d2\u0003\u0002",
    "\u0002\u0002\u00d9\u0011\u0003\u0002\u0002\u0002\u00da\u00dc\u0005\u001e",
    "\u0010\u0002\u00db\u00da\u0003\u0002\u0002\u0002\u00dc\u00df\u0003\u0002",
    "\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00dd\u00de\u0003\u0002",
    "\u0002\u0002\u00de\u0013\u0003\u0002\u0002\u0002\u00df\u00dd\u0003\u0002",
    "\u0002\u0002\u00e0\u00e1\u0007\u0018\u0002\u0002\u00e1\u00e2\u0007\u0019",
    "\u0002\u0002\u00e2\u00e3\u0007\u001a\u0002\u0002\u00e3\u00e4\u0005*",
    "\u0016\u0002\u00e4\u00e5\u0005*\u0016\u0002\u00e5\u00e6\u0007\u001b",
    "\u0002\u0002\u00e6\u0015\u0003\u0002\u0002\u0002\u00e7\u00ed\u0005\u0014",
    "\u000b\u0002\u00e8\u00e9\u0007\u001a\u0002\u0002\u00e9\u00ea\u0005\u0014",
    "\u000b\u0002\u00ea\u00eb\u0007\u001b\u0002\u0002\u00eb\u00ed\u0003\u0002",
    "\u0002\u0002\u00ec\u00e7\u0003\u0002\u0002\u0002\u00ec\u00e8\u0003\u0002",
    "\u0002\u0002\u00ed\u0017\u0003\u0002\u0002\u0002\u00ee\u00ef\u0007u",
    "\u0002\u0002\u00ef\u00f1\u0005\u0016\f\u0002\u00f0\u00f2\u0005$\u0013",
    "\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002",
    "\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007t\u0002",
    "\u0002\u00f4\u00f5\u0007v\u0002\u0002\u00f5\u0103\u0003\u0002\u0002",
    "\u0002\u00f6\u00f8\u0007\u001a\u0002\u0002\u00f7\u00f6\u0003\u0002\u0002",
    "\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002",
    "\u0002\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u00fc\u0003\u0002\u0002",
    "\u0002\u00fb\u00fd\u0005\u0016\f\u0002\u00fc\u00fb\u0003\u0002\u0002",
    "\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u00fc\u0003\u0002\u0002",
    "\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002",
    "\u0002\u0100\u0101\u0007\u001b\u0002\u0002\u0101\u0103\u0003\u0002\u0002",
    "\u0002\u0102\u00ee\u0003\u0002\u0002\u0002\u0102\u00f7\u0003\u0002\u0002",
    "\u0002\u0103\u0019\u0003\u0002\u0002\u0002\u0104\u0105\u0007\u001c\u0002",
    "\u0002\u0105\u0106\u0005,\u0017\u0002\u0106\u0107\u0007\u0004\u0002",
    "\u0002\u0107\u0109\u0005\n\u0006\u0002\u0108\u010a\u0005$\u0013\u0002",
    "\u0109\u0108\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002",
    "\u010a\u0188\u0003\u0002\u0002\u0002\u010b\u010c\u0007\u001d\u0002\u0002",
    "\u010c\u010d\u0005,\u0017\u0002\u010d\u010e\u0007\u0004\u0002\u0002",
    "\u010e\u010f\u0005\n\u0006\u0002\u010f\u0113\u0005*\u0016\u0002\u0110",
    "\u0111\u0007\u001e\u0002\u0002\u0111\u0112\u0007\u0004\u0002\u0002\u0112",
    "\u0114\u0005\u0018\r\u0002\u0113\u0110\u0003\u0002\u0002\u0002\u0113",
    "\u0114\u0003\u0002\u0002\u0002\u0114\u0116\u0003\u0002\u0002\u0002\u0115",
    "\u0117\u0005$\u0013\u0002\u0116\u0115\u0003\u0002\u0002\u0002\u0116",
    "\u0117\u0003\u0002\u0002\u0002\u0117\u0188\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0007\u001f\u0002\u0002\u0119\u011a\u0005,\u0017\u0002\u011a",
    "\u011c\u0007\u0004\u0002\u0002\u011b\u011d\u0005$\u0013\u0002\u011c",
    "\u011b\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d",
    "\u011e\u0003\u0002\u0002\u0002\u011e\u0122\u0007u\u0002\u0002\u011f",
    "\u0121\u0005\u001c\u000f\u0002\u0120\u011f\u0003\u0002\u0002\u0002\u0121",
    "\u0124\u0003\u0002\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0122",
    "\u0123\u0003\u0002\u0002\u0002\u0123\u0125\u0003\u0002\u0002\u0002\u0124",
    "\u0122\u0003\u0002\u0002\u0002\u0125\u0126\u0007v\u0002\u0002\u0126",
    "\u0188\u0003\u0002\u0002\u0002\u0127\u0128\u0007 \u0002\u0002\u0128",
    "\u0129\u0005,\u0017\u0002\u0129\u012a\u0007\u0004\u0002\u0002\u012a",
    "\u012c\u0005\n\u0006\u0002\u012b\u012d\u0005$\u0013\u0002\u012c\u012b",
    "\u0003\u0002\u0002\u0002\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u0188",
    "\u0003\u0002\u0002\u0002\u012e\u012f\u0007!\u0002\u0002\u012f\u0130",
    "\u0005,\u0017\u0002\u0130\u0131\u0007\u0004\u0002\u0002\u0131\u0133",
    "\u0005\n\u0006\u0002\u0132\u0134\u0005$\u0013\u0002\u0133\u0132\u0003",
    "\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134\u0188\u0003",
    "\u0002\u0002\u0002\u0135\u0136\u0005&\u0014\u0002\u0136\u0137\u0007",
    "\"\u0002\u0002\u0137\u0138\u0005,\u0017\u0002\u0138\u0139\u0007\u0016",
    "\u0002\u0002\u0139\u013a\u0005,\u0017\u0002\u013a\u013b\u0007\u0012",
    "\u0002\u0002\u013b\u013c\u0005*\u0016\u0002\u013c\u013d\u0007\u0013",
    "\u0002\u0002\u013d\u013f\u0005*\u0016\u0002\u013e\u0140\u0005$\u0013",
    "\u0002\u013f\u013e\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002",
    "\u0002\u0140\u0188\u0003\u0002\u0002\u0002\u0141\u0142\u0007#\u0002",
    "\u0002\u0142\u0143\u0005,\u0017\u0002\u0143\u0144\u0007$\u0002\u0002",
    "\u0144\u0146\u0005,\u0017\u0002\u0145\u0147\u0005$\u0013\u0002\u0146",
    "\u0145\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147",
    "\u0188\u0003\u0002\u0002\u0002\u0148\u0149\u0007%\u0002\u0002\u0149",
    "\u014a\u0005,\u0017\u0002\u014a\u014b\u0007\u0016\u0002\u0002\u014b",
    "\u014d\u0005*\u0016\u0002\u014c\u014e\u0005$\u0013\u0002\u014d\u014c",
    "\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u0188",
    "\u0003\u0002\u0002\u0002\u014f\u0150\u0005*\u0016\u0002\u0150\u0151",
    "\u0007&\u0002\u0002\u0151\u0153\u0005*\u0016\u0002\u0152\u0154\u0005",
    "$\u0013\u0002\u0153\u0152\u0003\u0002\u0002\u0002\u0153\u0154\u0003",
    "\u0002\u0002\u0002\u0154\u0188\u0003\u0002\u0002\u0002\u0155\u0156\u0005",
    "*\u0016\u0002\u0156\u0157\u0007\'\u0002\u0002\u0157\u0159\u0005*\u0016",
    "\u0002\u0158\u015a\u0005$\u0013\u0002\u0159\u0158\u0003\u0002\u0002",
    "\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u0188\u0003\u0002\u0002",
    "\u0002\u015b\u015c\u0005*\u0016\u0002\u015c\u015d\u0007(\u0002\u0002",
    "\u015d\u015f\u0007)\u0002\u0002\u015e\u0160\u0005$\u0013\u0002\u015f",
    "\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160",
    "\u0188\u0003\u0002\u0002\u0002\u0161\u0188\u0005\"\u0012\u0002\u0162",
    "\u0163\u0007*\u0002\u0002\u0163\u0164\u0005*\u0016\u0002\u0164\u0165",
    "\u0005*\u0016\u0002\u0165\u0166\u00050\u0019\u0002\u0166\u0168\u0007",
    "\u001b\u0002\u0002\u0167\u0169\u0005$\u0013\u0002\u0168\u0167\u0003",
    "\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\u0188\u0003",
    "\u0002\u0002\u0002\u016a\u016b\u0007+\u0002\u0002\u016b\u016c\u0005",
    "*\u0016\u0002\u016c\u016d\u0005*\u0016\u0002\u016d\u0171\u0007n\u0002",
    "\u0002\u016e\u0170\u0005*\u0016\u0002\u016f\u016e\u0003\u0002\u0002",
    "\u0002\u0170\u0173\u0003\u0002\u0002\u0002\u0171\u016f\u0003\u0002\u0002",
    "\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0174\u0003\u0002\u0002",
    "\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0174\u0176\u0007\u001b\u0002",
    "\u0002\u0175\u0177\u0005$\u0013\u0002\u0176\u0175\u0003\u0002\u0002",
    "\u0002\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0188\u0003\u0002\u0002",
    "\u0002\u0178\u017a\u0007,\u0002\u0002\u0179\u017b\u0005$\u0013\u0002",
    "\u017a\u0179\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002",
    "\u017b\u0188\u0003\u0002\u0002\u0002\u017c\u017d\u0007-\u0002\u0002",
    "\u017d\u017f\u0007\u001a\u0002\u0002\u017e\u0180\u0005*\u0016\u0002",
    "\u017f\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002",
    "\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002",
    "\u0182\u0183\u0003\u0002\u0002\u0002\u0183\u0185\u0007\u001b\u0002\u0002",
    "\u0184\u0186\u0005$\u0013\u0002\u0185\u0184\u0003\u0002\u0002\u0002",
    "\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0188\u0003\u0002\u0002\u0002",
    "\u0187\u0104\u0003\u0002\u0002\u0002\u0187\u010b\u0003\u0002\u0002\u0002",
    "\u0187\u0118\u0003\u0002\u0002\u0002\u0187\u0127\u0003\u0002\u0002\u0002",
    "\u0187\u012e\u0003\u0002\u0002\u0002\u0187\u0135\u0003\u0002\u0002\u0002",
    "\u0187\u0141\u0003\u0002\u0002\u0002\u0187\u0148\u0003\u0002\u0002\u0002",
    "\u0187\u014f\u0003\u0002\u0002\u0002\u0187\u0155\u0003\u0002\u0002\u0002",
    "\u0187\u015b\u0003\u0002\u0002\u0002\u0187\u0161\u0003\u0002\u0002\u0002",
    "\u0187\u0162\u0003\u0002\u0002\u0002\u0187\u016a\u0003\u0002\u0002\u0002",
    "\u0187\u0178\u0003\u0002\u0002\u0002\u0187\u017c\u0003\u0002\u0002\u0002",
    "\u0188\u001b\u0003\u0002\u0002\u0002\u0189\u018a\u0007.\u0002\u0002",
    "\u018a\u018b\u0007\u0019\u0002\u0002\u018b\u018c\u0005\n\u0006\u0002",
    "\u018c\u018d\u0007t\u0002\u0002\u018d\u01be\u0003\u0002\u0002\u0002",
    "\u018e\u018f\u0007/\u0002\u0002\u018f\u0190\u0007\u0019\u0002\u0002",
    "\u0190\u0191\u00050\u0019\u0002\u0191\u0192\u0007t\u0002\u0002\u0192",
    "\u01be\u0003\u0002\u0002\u0002\u0193\u0194\u00070\u0002\u0002\u0194",
    "\u0195\u0007\u0019\u0002\u0002\u0195\u0196\u00050\u0019\u0002\u0196",
    "\u0197\u0007t\u0002\u0002\u0197\u01be\u0003\u0002\u0002\u0002\u0198",
    "\u0199\u00071\u0002\u0002\u0199\u019a\u0007\u0019\u0002\u0002\u019a",
    "\u019b\u00050\u0019\u0002\u019b\u019c\u0007t\u0002\u0002\u019c\u01be",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u00072\u0002\u0002\u019e\u019f",
    "\u0007\u0019\u0002\u0002\u019f\u01a0\u0005(\u0015\u0002\u01a0\u01a1",
    "\u0007t\u0002\u0002\u01a1\u01be\u0003\u0002\u0002\u0002\u01a2\u01a3",
    "\u00073\u0002\u0002\u01a3\u01a5\u0007\u0019\u0002\u0002\u01a4\u01a6",
    "\u0005,\u0017\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7",
    "\u0003\u0002\u0002\u0002\u01a7\u01a5\u0003\u0002\u0002\u0002\u01a7\u01a8",
    "\u0003\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0007t\u0002\u0002\u01aa\u01be\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u00074\u0002\u0002\u01ac\u01ae\u0007\u0019\u0002\u0002\u01ad\u01af",
    "\u0005,\u0017\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1",
    "\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3",
    "\u0007t\u0002\u0002\u01b3\u01be\u0003\u0002\u0002\u0002\u01b4\u01b5",
    "\u00075\u0002\u0002\u01b5\u01b7\u0007\u0019\u0002\u0002\u01b6\u01b8",
    "\u0005,\u0017\u0002\u01b7\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b9",
    "\u0003\u0002\u0002\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01ba",
    "\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bc",
    "\u0007t\u0002\u0002\u01bc\u01be\u0003\u0002\u0002\u0002\u01bd\u0189",
    "\u0003\u0002\u0002\u0002\u01bd\u018e\u0003\u0002\u0002\u0002\u01bd\u0193",
    "\u0003\u0002\u0002\u0002\u01bd\u0198\u0003\u0002\u0002\u0002\u01bd\u019d",
    "\u0003\u0002\u0002\u0002\u01bd\u01a2\u0003\u0002\u0002\u0002\u01bd\u01ab",
    "\u0003\u0002\u0002\u0002\u01bd\u01b4\u0003\u0002\u0002\u0002\u01be\u001d",
    "\u0003\u0002\u0002\u0002\u01bf\u01c2\u0005\u001a\u000e\u0002\u01c0\u01c2",
    "\u0007t\u0002\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c0",
    "\u0003\u0002\u0002\u0002\u01c2\u001f\u0003\u0002\u0002\u0002\u01c3\u01cd",
    "\u0005\u001e\u0010\u0002\u01c4\u01c6\u0007u\u0002\u0002\u01c5\u01c7",
    "\u0005\u001e\u0010\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7\u01c8",
    "\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca\u01cb",
    "\u0007v\u0002\u0002\u01cb\u01cd\u0003\u0002\u0002\u0002\u01cc\u01c3",
    "\u0003\u0002\u0002\u0002\u01cc\u01c4\u0003\u0002\u0002\u0002\u01cd!",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u00076\u0002\u0002\u01cf\u01d0",
    "\u0005*\u0016\u0002\u01d0\u01d2\u0007\u0004\u0002\u0002\u01d1\u01d3",
    "\u0005$\u0013\u0002\u01d2\u01d1\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002\u0002\u0002\u01d4\u01d6",
    "\u0005 \u0011\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002\u01d5\u01d6",
    "\u0003\u0002\u0002\u0002\u01d6\u01e2\u0003\u0002\u0002\u0002\u01d7\u01e0",
    "\u00077\u0002\u0002\u01d8\u01e1\u0005\"\u0012\u0002\u01d9\u01db\u0007",
    "\u0004\u0002\u0002\u01da\u01dc\u0005$\u0013\u0002\u01db\u01da\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01de\u0003",
    "\u0002\u0002\u0002\u01dd\u01df\u0005 \u0011\u0002\u01de\u01dd\u0003",
    "\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e1\u0003",
    "\u0002\u0002\u0002\u01e0\u01d8\u0003\u0002\u0002\u0002\u01e0\u01d9\u0003",
    "\u0002\u0002\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01d7\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3#\u0003",
    "\u0002\u0002\u0002\u01e4\u01e5\u0007p\u0002\u0002\u01e5%\u0003\u0002",
    "\u0002\u0002\u01e6\u01e7\t\u0003\u0002\u0002\u01e7\'\u0003\u0002\u0002",
    "\u0002\u01e8\u01e9\t\u0004\u0002\u0002\u01e9)\u0003\u0002\u0002\u0002",
    "\u01ea\u01eb\b\u0016\u0001\u0002\u01eb\u01f0\u0007\t\u0002\u0002\u01ec",
    "\u01ed\u0007\n\u0002\u0002\u01ed\u01ee\u00050\u0019\u0002\u01ee\u01ef",
    "\u0007\u000b\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002\u0002\u01f0\u01ec",
    "\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1\u01f2",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007\u001a\u0002\u0002\u01f3\u01f4",
    "\u00050\u0019\u0002\u01f4\u01f5\u0007\u001b\u0002\u0002\u01f5\u021d",
    "\u0003\u0002\u0002\u0002\u01f6\u01fb\u0007\f\u0002\u0002\u01f7\u01f8",
    "\u0007\n\u0002\u0002\u01f8\u01f9\u00050\u0019\u0002\u01f9\u01fa\u0007",
    "\u000b\u0002\u0002\u01fa\u01fc\u0003\u0002\u0002\u0002\u01fb\u01f7\u0003",
    "\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003",
    "\u0002\u0002\u0002\u01fd\u01fe\u0007\u001a\u0002\u0002\u01fe\u01ff\u0005",
    "0\u0019\u0002\u01ff\u0200\u0007\u001b\u0002\u0002\u0200\u021d\u0003",
    "\u0002\u0002\u0002\u0201\u021d\u0005,\u0017\u0002\u0202\u0203\u0007",
    "@\u0002\u0002\u0203\u0204\u0005*\u0016\u0002\u0204\u0205\u0005*\u0016",
    "\u0002\u0205\u0206\u0005*\u0016\u0002\u0206\u0207\u0007\u001b\u0002",
    "\u0002\u0207\u021d\u0003\u0002\u0002\u0002\u0208\u0209\u0007A\u0002",
    "\u0002\u0209\u020a\u0005*\u0016\u0002\u020a\u020b\u0005*\u0016\u0002",
    "\u020b\u020c\u0007\u001b\u0002\u0002\u020c\u021d\u0003\u0002\u0002\u0002",
    "\u020d\u0211\u00054\u001b\u0002\u020e\u0210\u0005*\u0016\u0002\u020f",
    "\u020e\u0003\u0002\u0002\u0002\u0210\u0213\u0003\u0002\u0002\u0002\u0211",
    "\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212",
    "\u0217\u0003\u0002\u0002\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214",
    "\u0216\u00050\u0019\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0216",
    "\u0219\u0003\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217",
    "\u0218\u0003\u0002\u0002\u0002\u0218\u021a\u0003\u0002\u0002\u0002\u0219",
    "\u0217\u0003\u0002\u0002\u0002\u021a\u021b\u0007\u001b\u0002\u0002\u021b",
    "\u021d\u0003\u0002\u0002\u0002\u021c\u01ea\u0003\u0002\u0002\u0002\u021c",
    "\u01f6\u0003\u0002\u0002\u0002\u021c\u0201\u0003\u0002\u0002\u0002\u021c",
    "\u0202\u0003\u0002\u0002\u0002\u021c\u0208\u0003\u0002\u0002\u0002\u021c",
    "\u020d\u0003\u0002\u0002\u0002\u021d\u0230\u0003\u0002\u0002\u0002\u021e",
    "\u021f\f\t\u0002\u0002\u021f\u0220\u0007?\u0002\u0002\u0220\u022f\u0005",
    ".\u0018\u0002\u0221\u0222\f\b\u0002\u0002\u0222\u0223\u0007?\u0002\u0002",
    "\u0223\u022f\u0007m\u0002\u0002\u0224\u0225\f\u0007\u0002\u0002\u0225",
    "\u0226\u0007\u0012\u0002\u0002\u0226\u0227\u00050\u0019\u0002\u0227",
    "\u0228\u0007\u0013\u0002\u0002\u0228\u022f\u0003\u0002\u0002\u0002\u0229",
    "\u022a\f\u0006\u0002\u0002\u022a\u022b\u0007\u0012\u0002\u0002\u022b",
    "\u022c\u0005*\u0016\u0002\u022c\u022d\u0007\u0013\u0002\u0002\u022d",
    "\u022f\u0003\u0002\u0002\u0002\u022e\u021e\u0003\u0002\u0002\u0002\u022e",
    "\u0221\u0003\u0002\u0002\u0002\u022e\u0224\u0003\u0002\u0002\u0002\u022e",
    "\u0229\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002\u0002\u0002\u0230",
    "\u022e\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002\u0231",
    "+\u0003\u0002\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0233",
    "\u0236\u0007q\u0002\u0002\u0234\u0236\u00052\u001a\u0002\u0235\u0233",
    "\u0003\u0002\u0002\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0236-",
    "\u0003\u0002\u0002\u0002\u0237\u023c\u0007q\u0002\u0002\u0238\u023c",
    "\u0007r\u0002\u0002\u0239\u023c\u0007j\u0002\u0002\u023a\u023c\u0005",
    "2\u001a\u0002\u023b\u0237\u0003\u0002\u0002\u0002\u023b\u0238\u0003",
    "\u0002\u0002\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023b\u023a\u0003",
    "\u0002\u0002\u0002\u023c/\u0003\u0002\u0002\u0002\u023d\u023e\t\u0005",
    "\u0002\u0002\u023e1\u0003\u0002\u0002\u0002\u023f\u0240\t\u0006\u0002",
    "\u0002\u02403\u0003\u0002\u0002\u0002\u0241\u0242\t\u0007\u0002\u0002",
    "\u02425\u0003\u0002\u0002\u0002F:@IOY_chmt\u0080\u0087\u008e\u0096\u009e",
    "\u00a4\u00a8\u00b1\u00b5\u00d8\u00dd\u00ec\u00f1\u00f9\u00fe\u0102\u0109",
    "\u0113\u0116\u011c\u0122\u012c\u0133\u013f\u0146\u014d\u0153\u0159\u015f",
    "\u0168\u0171\u0176\u017a\u0181\u0185\u0187\u01a7\u01b0\u01b9\u01bd\u01c1",
    "\u01c8\u01cc\u01d2\u01d5\u01db\u01de\u01e0\u01e2\u01f0\u01fb\u0211\u0217",
    "\u021c\u022e\u0230\u0235\u023b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'circuit'", "':'", "'module'", "'extmodule'", 
                     "'input'", "'output'", "'UInt'", "'<'", "'>'", "'SInt'", 
                     "'Fixed'", "'Clock'", "'Analog'", "'{'", "'}'", "'['", 
                     "']'", "'flip'", "'defname'", "'='", "'parameter'", 
                     "'reset'", "'=>'", "'('", "')'", "'wire'", "'reg'", 
                     "'with'", "'mem'", "'cmem'", "'smem'", "'mport'", "'inst'", 
                     "'of'", "'node'", "'<='", "'<-'", "'is'", "'invalid'", 
                     "'stop('", "'printf('", "'skip'", "'attach'", "'data-type'", 
                     "'depth'", "'read-latency'", "'write-latency'", "'read-under-write'", 
                     "'reader'", "'writer'", "'readwriter'", "'when'", "'else'", 
                     "'infer'", "'read'", "'write'", "'rdwr'", "'old'", 
                     "'new'", "'undefined'", "'.'", "'mux('", "'validif('", 
                     "'stop'", "'printf'", "'mux'", "'validif'", "'add('", 
                     "'sub('", "'mul('", "'div('", "'rem('", "'lt('", "'leq('", 
                     "'gt('", "'geq('", "'eq('", "'neq('", "'pad('", "'asUInt('", 
                     "'asSInt('", "'asClock('", "'shl('", "'shr('", "'dshl('", 
                     "'dshr('", "'cvt('", "'neg('", "'not('", "'and('", 
                     "'or('", "'xor('", "'andr('", "'orr('", "'xorr('", 
                     "'cat('", "'bits('", "'head('", "'tail('", "'asFixedPoint('", 
                     "'bpshl('", "'bpshr('", "'bpset('" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, "UnsignedInt", "SignedInt", 
                      "HexLit", "DoubleLit", "StringLit", "RawString", "FileInfo", 
                      "Id", "RelaxedId", "SKIP_", "NEWLINE", "INDENT", "DEDENT" ];

var ruleNames =  [ "circuit", "module", "port", "dir", "type", "field", 
                   "defname", "parameter", "moduleBlock", "simple_reset0", 
                   "simple_reset", "reset_block", "stmt", "memField", "simple_stmt", 
                   "suite", "when", "info", "mdir", "ruw", "exp", "id", 
                   "fieldId", "intLit", "keywordAsId", "primop" ];

function FIRRTLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

FIRRTLParser.prototype = Object.create(antlr4.Parser.prototype);
FIRRTLParser.prototype.constructor = FIRRTLParser;

Object.defineProperty(FIRRTLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

FIRRTLParser.EOF = antlr4.Token.EOF;
FIRRTLParser.T__0 = 1;
FIRRTLParser.T__1 = 2;
FIRRTLParser.T__2 = 3;
FIRRTLParser.T__3 = 4;
FIRRTLParser.T__4 = 5;
FIRRTLParser.T__5 = 6;
FIRRTLParser.T__6 = 7;
FIRRTLParser.T__7 = 8;
FIRRTLParser.T__8 = 9;
FIRRTLParser.T__9 = 10;
FIRRTLParser.T__10 = 11;
FIRRTLParser.T__11 = 12;
FIRRTLParser.T__12 = 13;
FIRRTLParser.T__13 = 14;
FIRRTLParser.T__14 = 15;
FIRRTLParser.T__15 = 16;
FIRRTLParser.T__16 = 17;
FIRRTLParser.T__17 = 18;
FIRRTLParser.T__18 = 19;
FIRRTLParser.T__19 = 20;
FIRRTLParser.T__20 = 21;
FIRRTLParser.T__21 = 22;
FIRRTLParser.T__22 = 23;
FIRRTLParser.T__23 = 24;
FIRRTLParser.T__24 = 25;
FIRRTLParser.T__25 = 26;
FIRRTLParser.T__26 = 27;
FIRRTLParser.T__27 = 28;
FIRRTLParser.T__28 = 29;
FIRRTLParser.T__29 = 30;
FIRRTLParser.T__30 = 31;
FIRRTLParser.T__31 = 32;
FIRRTLParser.T__32 = 33;
FIRRTLParser.T__33 = 34;
FIRRTLParser.T__34 = 35;
FIRRTLParser.T__35 = 36;
FIRRTLParser.T__36 = 37;
FIRRTLParser.T__37 = 38;
FIRRTLParser.T__38 = 39;
FIRRTLParser.T__39 = 40;
FIRRTLParser.T__40 = 41;
FIRRTLParser.T__41 = 42;
FIRRTLParser.T__42 = 43;
FIRRTLParser.T__43 = 44;
FIRRTLParser.T__44 = 45;
FIRRTLParser.T__45 = 46;
FIRRTLParser.T__46 = 47;
FIRRTLParser.T__47 = 48;
FIRRTLParser.T__48 = 49;
FIRRTLParser.T__49 = 50;
FIRRTLParser.T__50 = 51;
FIRRTLParser.T__51 = 52;
FIRRTLParser.T__52 = 53;
FIRRTLParser.T__53 = 54;
FIRRTLParser.T__54 = 55;
FIRRTLParser.T__55 = 56;
FIRRTLParser.T__56 = 57;
FIRRTLParser.T__57 = 58;
FIRRTLParser.T__58 = 59;
FIRRTLParser.T__59 = 60;
FIRRTLParser.T__60 = 61;
FIRRTLParser.T__61 = 62;
FIRRTLParser.T__62 = 63;
FIRRTLParser.T__63 = 64;
FIRRTLParser.T__64 = 65;
FIRRTLParser.T__65 = 66;
FIRRTLParser.T__66 = 67;
FIRRTLParser.T__67 = 68;
FIRRTLParser.T__68 = 69;
FIRRTLParser.T__69 = 70;
FIRRTLParser.T__70 = 71;
FIRRTLParser.T__71 = 72;
FIRRTLParser.T__72 = 73;
FIRRTLParser.T__73 = 74;
FIRRTLParser.T__74 = 75;
FIRRTLParser.T__75 = 76;
FIRRTLParser.T__76 = 77;
FIRRTLParser.T__77 = 78;
FIRRTLParser.T__78 = 79;
FIRRTLParser.T__79 = 80;
FIRRTLParser.T__80 = 81;
FIRRTLParser.T__81 = 82;
FIRRTLParser.T__82 = 83;
FIRRTLParser.T__83 = 84;
FIRRTLParser.T__84 = 85;
FIRRTLParser.T__85 = 86;
FIRRTLParser.T__86 = 87;
FIRRTLParser.T__87 = 88;
FIRRTLParser.T__88 = 89;
FIRRTLParser.T__89 = 90;
FIRRTLParser.T__90 = 91;
FIRRTLParser.T__91 = 92;
FIRRTLParser.T__92 = 93;
FIRRTLParser.T__93 = 94;
FIRRTLParser.T__94 = 95;
FIRRTLParser.T__95 = 96;
FIRRTLParser.T__96 = 97;
FIRRTLParser.T__97 = 98;
FIRRTLParser.T__98 = 99;
FIRRTLParser.T__99 = 100;
FIRRTLParser.T__100 = 101;
FIRRTLParser.T__101 = 102;
FIRRTLParser.T__102 = 103;
FIRRTLParser.UnsignedInt = 104;
FIRRTLParser.SignedInt = 105;
FIRRTLParser.HexLit = 106;
FIRRTLParser.DoubleLit = 107;
FIRRTLParser.StringLit = 108;
FIRRTLParser.RawString = 109;
FIRRTLParser.FileInfo = 110;
FIRRTLParser.Id = 111;
FIRRTLParser.RelaxedId = 112;
FIRRTLParser.SKIP_ = 113;
FIRRTLParser.NEWLINE = 114;
FIRRTLParser.INDENT = 115;
FIRRTLParser.DEDENT = 116;

FIRRTLParser.RULE_circuit = 0;
FIRRTLParser.RULE_module = 1;
FIRRTLParser.RULE_port = 2;
FIRRTLParser.RULE_dir = 3;
FIRRTLParser.RULE_type = 4;
FIRRTLParser.RULE_field = 5;
FIRRTLParser.RULE_defname = 6;
FIRRTLParser.RULE_parameter = 7;
FIRRTLParser.RULE_moduleBlock = 8;
FIRRTLParser.RULE_simple_reset0 = 9;
FIRRTLParser.RULE_simple_reset = 10;
FIRRTLParser.RULE_reset_block = 11;
FIRRTLParser.RULE_stmt = 12;
FIRRTLParser.RULE_memField = 13;
FIRRTLParser.RULE_simple_stmt = 14;
FIRRTLParser.RULE_suite = 15;
FIRRTLParser.RULE_when = 16;
FIRRTLParser.RULE_info = 17;
FIRRTLParser.RULE_mdir = 18;
FIRRTLParser.RULE_ruw = 19;
FIRRTLParser.RULE_exp = 20;
FIRRTLParser.RULE_id = 21;
FIRRTLParser.RULE_fieldId = 22;
FIRRTLParser.RULE_intLit = 23;
FIRRTLParser.RULE_keywordAsId = 24;
FIRRTLParser.RULE_primop = 25;

function CircuitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_circuit;
    return this;
}

CircuitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CircuitContext.prototype.constructor = CircuitContext;

CircuitContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

CircuitContext.prototype.INDENT = function() {
    return this.getToken(FIRRTLParser.INDENT, 0);
};

CircuitContext.prototype.DEDENT = function() {
    return this.getToken(FIRRTLParser.DEDENT, 0);
};

CircuitContext.prototype.info = function() {
    return this.getTypedRuleContext(InfoContext,0);
};

CircuitContext.prototype.module = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModuleContext);
    } else {
        return this.getTypedRuleContext(ModuleContext,i);
    }
};

CircuitContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterCircuit(this);
	}
};

CircuitContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitCircuit(this);
	}
};




FIRRTLParser.CircuitContext = CircuitContext;

FIRRTLParser.prototype.circuit = function() {

    var localctx = new CircuitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, FIRRTLParser.RULE_circuit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 52;
        this.match(FIRRTLParser.T__0);
        this.state = 53;
        this.id();
        this.state = 54;
        this.match(FIRRTLParser.T__1);
        this.state = 56;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FIRRTLParser.FileInfo) {
            this.state = 55;
            this.info();
        }

        this.state = 58;
        this.match(FIRRTLParser.INDENT);
        this.state = 62;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FIRRTLParser.T__2 || _la===FIRRTLParser.T__3) {
            this.state = 59;
            this.module();
            this.state = 64;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 65;
        this.match(FIRRTLParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_module;
    return this;
}

ModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleContext.prototype.constructor = ModuleContext;

ModuleContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ModuleContext.prototype.INDENT = function() {
    return this.getToken(FIRRTLParser.INDENT, 0);
};

ModuleContext.prototype.moduleBlock = function() {
    return this.getTypedRuleContext(ModuleBlockContext,0);
};

ModuleContext.prototype.DEDENT = function() {
    return this.getToken(FIRRTLParser.DEDENT, 0);
};

ModuleContext.prototype.info = function() {
    return this.getTypedRuleContext(InfoContext,0);
};

ModuleContext.prototype.port = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortContext);
    } else {
        return this.getTypedRuleContext(PortContext,i);
    }
};

ModuleContext.prototype.defname = function() {
    return this.getTypedRuleContext(DefnameContext,0);
};

ModuleContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterModule(this);
	}
};

ModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitModule(this);
	}
};




FIRRTLParser.ModuleContext = ModuleContext;

FIRRTLParser.prototype.module = function() {

    var localctx = new ModuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, FIRRTLParser.RULE_module);
    var _la = 0; // Token type
    try {
        this.state = 107;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__2:
            this.enterOuterAlt(localctx, 1);
            this.state = 67;
            this.match(FIRRTLParser.T__2);
            this.state = 68;
            this.id();
            this.state = 69;
            this.match(FIRRTLParser.T__1);
            this.state = 71;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 70;
                this.info();
            }

            this.state = 73;
            this.match(FIRRTLParser.INDENT);
            this.state = 77;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 74;
                    this.port(); 
                }
                this.state = 79;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            this.state = 80;
            this.moduleBlock();
            this.state = 81;
            this.match(FIRRTLParser.DEDENT);
            break;
        case FIRRTLParser.T__3:
            this.enterOuterAlt(localctx, 2);
            this.state = 83;
            this.match(FIRRTLParser.T__3);
            this.state = 84;
            this.id();
            this.state = 85;
            this.match(FIRRTLParser.T__1);
            this.state = 87;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 86;
                this.info();
            }

            this.state = 89;
            this.match(FIRRTLParser.INDENT);
            this.state = 93;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FIRRTLParser.T__4 || _la===FIRRTLParser.T__5) {
                this.state = 90;
                this.port();
                this.state = 95;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 97;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.T__18) {
                this.state = 96;
                this.defname();
            }

            this.state = 102;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FIRRTLParser.T__20) {
                this.state = 99;
                this.parameter();
                this.state = 104;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 105;
            this.match(FIRRTLParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.dir = function() {
    return this.getTypedRuleContext(DirContext,0);
};

PortContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

PortContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PortContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

PortContext.prototype.info = function() {
    return this.getTypedRuleContext(InfoContext,0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitPort(this);
	}
};




FIRRTLParser.PortContext = PortContext;

FIRRTLParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, FIRRTLParser.RULE_port);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 109;
        this.dir();
        this.state = 110;
        this.id();
        this.state = 111;
        this.match(FIRRTLParser.T__1);
        this.state = 112;
        this.type(0);
        this.state = 114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FIRRTLParser.FileInfo) {
            this.state = 113;
            this.info();
        }

        this.state = 116;
        this.match(FIRRTLParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_dir;
    return this;
}

DirContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirContext.prototype.constructor = DirContext;


DirContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterDir(this);
	}
};

DirContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitDir(this);
	}
};




FIRRTLParser.DirContext = DirContext;

FIRRTLParser.prototype.dir = function() {

    var localctx = new DirContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, FIRRTLParser.RULE_dir);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 118;
        _la = this._input.LA(1);
        if(!(_la===FIRRTLParser.T__4 || _la===FIRRTLParser.T__5)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.intLit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntLitContext);
    } else {
        return this.getTypedRuleContext(IntLitContext,i);
    }
};

TypeContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

TypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitType(this);
	}
};



FIRRTLParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 8;
    this.enterRecursionRule(localctx, 8, FIRRTLParser.RULE_type, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__6:
            this.state = 121;
            this.match(FIRRTLParser.T__6);
            this.state = 126;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 122;
                this.match(FIRRTLParser.T__7);
                this.state = 123;
                this.intLit();
                this.state = 124;
                this.match(FIRRTLParser.T__8);

            }
            break;
        case FIRRTLParser.T__9:
            this.state = 128;
            this.match(FIRRTLParser.T__9);
            this.state = 133;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 129;
                this.match(FIRRTLParser.T__7);
                this.state = 130;
                this.intLit();
                this.state = 131;
                this.match(FIRRTLParser.T__8);

            }
            break;
        case FIRRTLParser.T__10:
            this.state = 135;
            this.match(FIRRTLParser.T__10);
            this.state = 140;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
            if(la_===1) {
                this.state = 136;
                this.match(FIRRTLParser.T__7);
                this.state = 137;
                this.intLit();
                this.state = 138;
                this.match(FIRRTLParser.T__8);

            }
            this.state = 148;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            if(la_===1) {
                this.state = 142;
                this.match(FIRRTLParser.T__7);
                this.state = 143;
                this.match(FIRRTLParser.T__7);
                this.state = 144;
                this.intLit();
                this.state = 145;
                this.match(FIRRTLParser.T__8);
                this.state = 146;
                this.match(FIRRTLParser.T__8);

            }
            break;
        case FIRRTLParser.T__11:
            this.state = 150;
            this.match(FIRRTLParser.T__11);
            break;
        case FIRRTLParser.T__12:
            this.state = 151;
            this.match(FIRRTLParser.T__12);
            this.state = 156;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 152;
                this.match(FIRRTLParser.T__7);
                this.state = 153;
                this.intLit();
                this.state = 154;
                this.match(FIRRTLParser.T__8);

            }
            break;
        case FIRRTLParser.T__13:
            this.state = 158;
            this.match(FIRRTLParser.T__13);
            this.state = 162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (FIRRTLParser.UnsignedInt - 104)) | (1 << (FIRRTLParser.Id - 104)) | (1 << (FIRRTLParser.RelaxedId - 104)))) !== 0)) {
                this.state = 159;
                this.field();
                this.state = 164;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 165;
            this.match(FIRRTLParser.T__14);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 175;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, FIRRTLParser.RULE_type);
                this.state = 168;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 169;
                this.match(FIRRTLParser.T__15);
                this.state = 170;
                this.intLit();
                this.state = 171;
                this.match(FIRRTLParser.T__16); 
            }
            this.state = 177;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;

FieldContext.prototype.fieldId = function() {
    return this.getTypedRuleContext(FieldIdContext,0);
};

FieldContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitField(this);
	}
};




FIRRTLParser.FieldContext = FieldContext;

FIRRTLParser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, FIRRTLParser.RULE_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 178;
            this.match(FIRRTLParser.T__17);

        }
        this.state = 181;
        this.fieldId();
        this.state = 182;
        this.match(FIRRTLParser.T__1);
        this.state = 183;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_defname;
    return this;
}

DefnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefnameContext.prototype.constructor = DefnameContext;

DefnameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

DefnameContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

DefnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterDefname(this);
	}
};

DefnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitDefname(this);
	}
};




FIRRTLParser.DefnameContext = DefnameContext;

FIRRTLParser.prototype.defname = function() {

    var localctx = new DefnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, FIRRTLParser.RULE_defname);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        this.match(FIRRTLParser.T__18);
        this.state = 186;
        this.match(FIRRTLParser.T__19);
        this.state = 187;
        this.id();
        this.state = 188;
        this.match(FIRRTLParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ParameterContext.prototype.intLit = function() {
    return this.getTypedRuleContext(IntLitContext,0);
};

ParameterContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

ParameterContext.prototype.StringLit = function() {
    return this.getToken(FIRRTLParser.StringLit, 0);
};

ParameterContext.prototype.DoubleLit = function() {
    return this.getToken(FIRRTLParser.DoubleLit, 0);
};

ParameterContext.prototype.RawString = function() {
    return this.getToken(FIRRTLParser.RawString, 0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitParameter(this);
	}
};




FIRRTLParser.ParameterContext = ParameterContext;

FIRRTLParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, FIRRTLParser.RULE_parameter);
    try {
        this.state = 214;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 190;
            this.match(FIRRTLParser.T__20);
            this.state = 191;
            this.id();
            this.state = 192;
            this.match(FIRRTLParser.T__19);
            this.state = 193;
            this.intLit();
            this.state = 194;
            this.match(FIRRTLParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 196;
            this.match(FIRRTLParser.T__20);
            this.state = 197;
            this.id();
            this.state = 198;
            this.match(FIRRTLParser.T__19);
            this.state = 199;
            this.match(FIRRTLParser.StringLit);
            this.state = 200;
            this.match(FIRRTLParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 202;
            this.match(FIRRTLParser.T__20);
            this.state = 203;
            this.id();
            this.state = 204;
            this.match(FIRRTLParser.T__19);
            this.state = 205;
            this.match(FIRRTLParser.DoubleLit);
            this.state = 206;
            this.match(FIRRTLParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 208;
            this.match(FIRRTLParser.T__20);
            this.state = 209;
            this.id();
            this.state = 210;
            this.match(FIRRTLParser.T__19);
            this.state = 211;
            this.match(FIRRTLParser.RawString);
            this.state = 212;
            this.match(FIRRTLParser.NEWLINE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModuleBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_moduleBlock;
    return this;
}

ModuleBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleBlockContext.prototype.constructor = ModuleBlockContext;

ModuleBlockContext.prototype.simple_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_stmtContext);
    } else {
        return this.getTypedRuleContext(Simple_stmtContext,i);
    }
};

ModuleBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterModuleBlock(this);
	}
};

ModuleBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitModuleBlock(this);
	}
};




FIRRTLParser.ModuleBlockContext = ModuleBlockContext;

FIRRTLParser.prototype.moduleBlock = function() {

    var localctx = new ModuleBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, FIRRTLParser.RULE_moduleBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__39 - 32)) | (1 << (FIRRTLParser.T__40 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__42 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)) | (1 << (FIRRTLParser.T__61 - 32)) | (1 << (FIRRTLParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)) | (1 << (FIRRTLParser.T__67 - 64)) | (1 << (FIRRTLParser.T__68 - 64)) | (1 << (FIRRTLParser.T__69 - 64)) | (1 << (FIRRTLParser.T__70 - 64)) | (1 << (FIRRTLParser.T__71 - 64)) | (1 << (FIRRTLParser.T__72 - 64)) | (1 << (FIRRTLParser.T__73 - 64)) | (1 << (FIRRTLParser.T__74 - 64)) | (1 << (FIRRTLParser.T__75 - 64)) | (1 << (FIRRTLParser.T__76 - 64)) | (1 << (FIRRTLParser.T__77 - 64)) | (1 << (FIRRTLParser.T__78 - 64)) | (1 << (FIRRTLParser.T__79 - 64)) | (1 << (FIRRTLParser.T__80 - 64)) | (1 << (FIRRTLParser.T__81 - 64)) | (1 << (FIRRTLParser.T__82 - 64)) | (1 << (FIRRTLParser.T__83 - 64)) | (1 << (FIRRTLParser.T__84 - 64)) | (1 << (FIRRTLParser.T__85 - 64)) | (1 << (FIRRTLParser.T__86 - 64)) | (1 << (FIRRTLParser.T__87 - 64)) | (1 << (FIRRTLParser.T__88 - 64)) | (1 << (FIRRTLParser.T__89 - 64)) | (1 << (FIRRTLParser.T__90 - 64)) | (1 << (FIRRTLParser.T__91 - 64)) | (1 << (FIRRTLParser.T__92 - 64)) | (1 << (FIRRTLParser.T__93 - 64)) | (1 << (FIRRTLParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FIRRTLParser.T__95 - 96)) | (1 << (FIRRTLParser.T__96 - 96)) | (1 << (FIRRTLParser.T__97 - 96)) | (1 << (FIRRTLParser.T__98 - 96)) | (1 << (FIRRTLParser.T__99 - 96)) | (1 << (FIRRTLParser.T__100 - 96)) | (1 << (FIRRTLParser.T__101 - 96)) | (1 << (FIRRTLParser.T__102 - 96)) | (1 << (FIRRTLParser.Id - 96)) | (1 << (FIRRTLParser.NEWLINE - 96)))) !== 0)) {
            this.state = 216;
            this.simple_stmt();
            this.state = 221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_reset0Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_simple_reset0;
    return this;
}

Simple_reset0Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_reset0Context.prototype.constructor = Simple_reset0Context;

Simple_reset0Context.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

Simple_reset0Context.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterSimple_reset0(this);
	}
};

Simple_reset0Context.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitSimple_reset0(this);
	}
};




FIRRTLParser.Simple_reset0Context = Simple_reset0Context;

FIRRTLParser.prototype.simple_reset0 = function() {

    var localctx = new Simple_reset0Context(this, this._ctx, this.state);
    this.enterRule(localctx, 18, FIRRTLParser.RULE_simple_reset0);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(FIRRTLParser.T__21);
        this.state = 223;
        this.match(FIRRTLParser.T__22);
        this.state = 224;
        this.match(FIRRTLParser.T__23);
        this.state = 225;
        this.exp(0);
        this.state = 226;
        this.exp(0);
        this.state = 227;
        this.match(FIRRTLParser.T__24);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_resetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_simple_reset;
    return this;
}

Simple_resetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_resetContext.prototype.constructor = Simple_resetContext;

Simple_resetContext.prototype.simple_reset0 = function() {
    return this.getTypedRuleContext(Simple_reset0Context,0);
};

Simple_resetContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterSimple_reset(this);
	}
};

Simple_resetContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitSimple_reset(this);
	}
};




FIRRTLParser.Simple_resetContext = Simple_resetContext;

FIRRTLParser.prototype.simple_reset = function() {

    var localctx = new Simple_resetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, FIRRTLParser.RULE_simple_reset);
    try {
        this.state = 234;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__21:
            this.enterOuterAlt(localctx, 1);
            this.state = 229;
            this.simple_reset0();
            break;
        case FIRRTLParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 230;
            this.match(FIRRTLParser.T__23);
            this.state = 231;
            this.simple_reset0();
            this.state = 232;
            this.match(FIRRTLParser.T__24);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reset_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_reset_block;
    return this;
}

Reset_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reset_blockContext.prototype.constructor = Reset_blockContext;

Reset_blockContext.prototype.INDENT = function() {
    return this.getToken(FIRRTLParser.INDENT, 0);
};

Reset_blockContext.prototype.simple_reset = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_resetContext);
    } else {
        return this.getTypedRuleContext(Simple_resetContext,i);
    }
};

Reset_blockContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

Reset_blockContext.prototype.DEDENT = function() {
    return this.getToken(FIRRTLParser.DEDENT, 0);
};

Reset_blockContext.prototype.info = function() {
    return this.getTypedRuleContext(InfoContext,0);
};

Reset_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterReset_block(this);
	}
};

Reset_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitReset_block(this);
	}
};




FIRRTLParser.Reset_blockContext = Reset_blockContext;

FIRRTLParser.prototype.reset_block = function() {

    var localctx = new Reset_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, FIRRTLParser.RULE_reset_block);
    var _la = 0; // Token type
    try {
        this.state = 256;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.INDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 236;
            this.match(FIRRTLParser.INDENT);
            this.state = 237;
            this.simple_reset();
            this.state = 239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 238;
                this.info();
            }

            this.state = 241;
            this.match(FIRRTLParser.NEWLINE);
            this.state = 242;
            this.match(FIRRTLParser.DEDENT);
            break;
        case FIRRTLParser.T__23:
            this.enterOuterAlt(localctx, 2);
            this.state = 245; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 244;
            		this.match(FIRRTLParser.T__23);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 247; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,23, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 250; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 249;
                this.simple_reset();
                this.state = 252; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FIRRTLParser.T__21 || _la===FIRRTLParser.T__23);
            this.state = 254;
            this.match(FIRRTLParser.T__24);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

StmtContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

StmtContext.prototype.info = function() {
    return this.getTypedRuleContext(InfoContext,0);
};

StmtContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

StmtContext.prototype.reset_block = function() {
    return this.getTypedRuleContext(Reset_blockContext,0);
};

StmtContext.prototype.INDENT = function() {
    return this.getToken(FIRRTLParser.INDENT, 0);
};

StmtContext.prototype.DEDENT = function() {
    return this.getToken(FIRRTLParser.DEDENT, 0);
};

StmtContext.prototype.memField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MemFieldContext);
    } else {
        return this.getTypedRuleContext(MemFieldContext,i);
    }
};

StmtContext.prototype.mdir = function() {
    return this.getTypedRuleContext(MdirContext,0);
};

StmtContext.prototype.when = function() {
    return this.getTypedRuleContext(WhenContext,0);
};

StmtContext.prototype.intLit = function() {
    return this.getTypedRuleContext(IntLitContext,0);
};

StmtContext.prototype.StringLit = function() {
    return this.getToken(FIRRTLParser.StringLit, 0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitStmt(this);
	}
};




FIRRTLParser.StmtContext = StmtContext;

FIRRTLParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, FIRRTLParser.RULE_stmt);
    var _la = 0; // Token type
    try {
        this.state = 389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 258;
            this.match(FIRRTLParser.T__25);
            this.state = 259;
            this.id();
            this.state = 260;
            this.match(FIRRTLParser.T__1);
            this.state = 261;
            this.type(0);
            this.state = 263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 262;
                this.info();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 265;
            this.match(FIRRTLParser.T__26);
            this.state = 266;
            this.id();
            this.state = 267;
            this.match(FIRRTLParser.T__1);
            this.state = 268;
            this.type(0);
            this.state = 269;
            this.exp(0);
            this.state = 273;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 270;
                this.match(FIRRTLParser.T__27);
                this.state = 271;
                this.match(FIRRTLParser.T__1);
                this.state = 272;
                this.reset_block();

            }
            this.state = 276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 275;
                this.info();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 278;
            this.match(FIRRTLParser.T__28);
            this.state = 279;
            this.id();
            this.state = 280;
            this.match(FIRRTLParser.T__1);
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 281;
                this.info();
            }

            this.state = 284;
            this.match(FIRRTLParser.INDENT);
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (FIRRTLParser.T__43 - 44)) | (1 << (FIRRTLParser.T__44 - 44)) | (1 << (FIRRTLParser.T__45 - 44)) | (1 << (FIRRTLParser.T__46 - 44)) | (1 << (FIRRTLParser.T__47 - 44)) | (1 << (FIRRTLParser.T__48 - 44)) | (1 << (FIRRTLParser.T__49 - 44)) | (1 << (FIRRTLParser.T__50 - 44)))) !== 0)) {
                this.state = 285;
                this.memField();
                this.state = 290;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 291;
            this.match(FIRRTLParser.DEDENT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 293;
            this.match(FIRRTLParser.T__29);
            this.state = 294;
            this.id();
            this.state = 295;
            this.match(FIRRTLParser.T__1);
            this.state = 296;
            this.type(0);
            this.state = 298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 297;
                this.info();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 300;
            this.match(FIRRTLParser.T__30);
            this.state = 301;
            this.id();
            this.state = 302;
            this.match(FIRRTLParser.T__1);
            this.state = 303;
            this.type(0);
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 304;
                this.info();
            }

            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 307;
            this.mdir();
            this.state = 308;
            this.match(FIRRTLParser.T__31);
            this.state = 309;
            this.id();
            this.state = 310;
            this.match(FIRRTLParser.T__19);
            this.state = 311;
            this.id();
            this.state = 312;
            this.match(FIRRTLParser.T__15);
            this.state = 313;
            this.exp(0);
            this.state = 314;
            this.match(FIRRTLParser.T__16);
            this.state = 315;
            this.exp(0);
            this.state = 317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 316;
                this.info();
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 319;
            this.match(FIRRTLParser.T__32);
            this.state = 320;
            this.id();
            this.state = 321;
            this.match(FIRRTLParser.T__33);
            this.state = 322;
            this.id();
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 323;
                this.info();
            }

            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 326;
            this.match(FIRRTLParser.T__34);
            this.state = 327;
            this.id();
            this.state = 328;
            this.match(FIRRTLParser.T__19);
            this.state = 329;
            this.exp(0);
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 330;
                this.info();
            }

            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 333;
            this.exp(0);
            this.state = 334;
            this.match(FIRRTLParser.T__35);
            this.state = 335;
            this.exp(0);
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 336;
                this.info();
            }

            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 339;
            this.exp(0);
            this.state = 340;
            this.match(FIRRTLParser.T__36);
            this.state = 341;
            this.exp(0);
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 342;
                this.info();
            }

            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 345;
            this.exp(0);
            this.state = 346;
            this.match(FIRRTLParser.T__37);
            this.state = 347;
            this.match(FIRRTLParser.T__38);
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 348;
                this.info();
            }

            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 351;
            this.when();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 352;
            this.match(FIRRTLParser.T__39);
            this.state = 353;
            this.exp(0);
            this.state = 354;
            this.exp(0);
            this.state = 355;
            this.intLit();
            this.state = 356;
            this.match(FIRRTLParser.T__24);
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 357;
                this.info();
            }

            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 360;
            this.match(FIRRTLParser.T__40);
            this.state = 361;
            this.exp(0);
            this.state = 362;
            this.exp(0);
            this.state = 363;
            this.match(FIRRTLParser.StringLit);
            this.state = 367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)) | (1 << (FIRRTLParser.T__61 - 32)) | (1 << (FIRRTLParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)) | (1 << (FIRRTLParser.T__67 - 64)) | (1 << (FIRRTLParser.T__68 - 64)) | (1 << (FIRRTLParser.T__69 - 64)) | (1 << (FIRRTLParser.T__70 - 64)) | (1 << (FIRRTLParser.T__71 - 64)) | (1 << (FIRRTLParser.T__72 - 64)) | (1 << (FIRRTLParser.T__73 - 64)) | (1 << (FIRRTLParser.T__74 - 64)) | (1 << (FIRRTLParser.T__75 - 64)) | (1 << (FIRRTLParser.T__76 - 64)) | (1 << (FIRRTLParser.T__77 - 64)) | (1 << (FIRRTLParser.T__78 - 64)) | (1 << (FIRRTLParser.T__79 - 64)) | (1 << (FIRRTLParser.T__80 - 64)) | (1 << (FIRRTLParser.T__81 - 64)) | (1 << (FIRRTLParser.T__82 - 64)) | (1 << (FIRRTLParser.T__83 - 64)) | (1 << (FIRRTLParser.T__84 - 64)) | (1 << (FIRRTLParser.T__85 - 64)) | (1 << (FIRRTLParser.T__86 - 64)) | (1 << (FIRRTLParser.T__87 - 64)) | (1 << (FIRRTLParser.T__88 - 64)) | (1 << (FIRRTLParser.T__89 - 64)) | (1 << (FIRRTLParser.T__90 - 64)) | (1 << (FIRRTLParser.T__91 - 64)) | (1 << (FIRRTLParser.T__92 - 64)) | (1 << (FIRRTLParser.T__93 - 64)) | (1 << (FIRRTLParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FIRRTLParser.T__95 - 96)) | (1 << (FIRRTLParser.T__96 - 96)) | (1 << (FIRRTLParser.T__97 - 96)) | (1 << (FIRRTLParser.T__98 - 96)) | (1 << (FIRRTLParser.T__99 - 96)) | (1 << (FIRRTLParser.T__100 - 96)) | (1 << (FIRRTLParser.T__101 - 96)) | (1 << (FIRRTLParser.T__102 - 96)) | (1 << (FIRRTLParser.Id - 96)))) !== 0)) {
                this.state = 364;
                this.exp(0);
                this.state = 369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 370;
            this.match(FIRRTLParser.T__24);
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 371;
                this.info();
            }

            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 374;
            this.match(FIRRTLParser.T__41);
            this.state = 376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 375;
                this.info();
            }

            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 378;
            this.match(FIRRTLParser.T__42);
            this.state = 379;
            this.match(FIRRTLParser.T__23);
            this.state = 381; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 380;
                this.exp(0);
                this.state = 383; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)) | (1 << (FIRRTLParser.T__61 - 32)) | (1 << (FIRRTLParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)) | (1 << (FIRRTLParser.T__67 - 64)) | (1 << (FIRRTLParser.T__68 - 64)) | (1 << (FIRRTLParser.T__69 - 64)) | (1 << (FIRRTLParser.T__70 - 64)) | (1 << (FIRRTLParser.T__71 - 64)) | (1 << (FIRRTLParser.T__72 - 64)) | (1 << (FIRRTLParser.T__73 - 64)) | (1 << (FIRRTLParser.T__74 - 64)) | (1 << (FIRRTLParser.T__75 - 64)) | (1 << (FIRRTLParser.T__76 - 64)) | (1 << (FIRRTLParser.T__77 - 64)) | (1 << (FIRRTLParser.T__78 - 64)) | (1 << (FIRRTLParser.T__79 - 64)) | (1 << (FIRRTLParser.T__80 - 64)) | (1 << (FIRRTLParser.T__81 - 64)) | (1 << (FIRRTLParser.T__82 - 64)) | (1 << (FIRRTLParser.T__83 - 64)) | (1 << (FIRRTLParser.T__84 - 64)) | (1 << (FIRRTLParser.T__85 - 64)) | (1 << (FIRRTLParser.T__86 - 64)) | (1 << (FIRRTLParser.T__87 - 64)) | (1 << (FIRRTLParser.T__88 - 64)) | (1 << (FIRRTLParser.T__89 - 64)) | (1 << (FIRRTLParser.T__90 - 64)) | (1 << (FIRRTLParser.T__91 - 64)) | (1 << (FIRRTLParser.T__92 - 64)) | (1 << (FIRRTLParser.T__93 - 64)) | (1 << (FIRRTLParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FIRRTLParser.T__95 - 96)) | (1 << (FIRRTLParser.T__96 - 96)) | (1 << (FIRRTLParser.T__97 - 96)) | (1 << (FIRRTLParser.T__98 - 96)) | (1 << (FIRRTLParser.T__99 - 96)) | (1 << (FIRRTLParser.T__100 - 96)) | (1 << (FIRRTLParser.T__101 - 96)) | (1 << (FIRRTLParser.T__102 - 96)) | (1 << (FIRRTLParser.Id - 96)))) !== 0));
            this.state = 385;
            this.match(FIRRTLParser.T__24);
            this.state = 387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.FileInfo) {
                this.state = 386;
                this.info();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_memField;
    return this;
}

MemFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemFieldContext.prototype.constructor = MemFieldContext;

MemFieldContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MemFieldContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

MemFieldContext.prototype.intLit = function() {
    return this.getTypedRuleContext(IntLitContext,0);
};

MemFieldContext.prototype.ruw = function() {
    return this.getTypedRuleContext(RuwContext,0);
};

MemFieldContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

MemFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterMemField(this);
	}
};

MemFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitMemField(this);
	}
};




FIRRTLParser.MemFieldContext = MemFieldContext;

FIRRTLParser.prototype.memField = function() {

    var localctx = new MemFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, FIRRTLParser.RULE_memField);
    var _la = 0; // Token type
    try {
        this.state = 443;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__43:
            this.enterOuterAlt(localctx, 1);
            this.state = 391;
            this.match(FIRRTLParser.T__43);
            this.state = 392;
            this.match(FIRRTLParser.T__22);
            this.state = 393;
            this.type(0);
            this.state = 394;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__44:
            this.enterOuterAlt(localctx, 2);
            this.state = 396;
            this.match(FIRRTLParser.T__44);
            this.state = 397;
            this.match(FIRRTLParser.T__22);
            this.state = 398;
            this.intLit();
            this.state = 399;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__45:
            this.enterOuterAlt(localctx, 3);
            this.state = 401;
            this.match(FIRRTLParser.T__45);
            this.state = 402;
            this.match(FIRRTLParser.T__22);
            this.state = 403;
            this.intLit();
            this.state = 404;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__46:
            this.enterOuterAlt(localctx, 4);
            this.state = 406;
            this.match(FIRRTLParser.T__46);
            this.state = 407;
            this.match(FIRRTLParser.T__22);
            this.state = 408;
            this.intLit();
            this.state = 409;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__47:
            this.enterOuterAlt(localctx, 5);
            this.state = 411;
            this.match(FIRRTLParser.T__47);
            this.state = 412;
            this.match(FIRRTLParser.T__22);
            this.state = 413;
            this.ruw();
            this.state = 414;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__48:
            this.enterOuterAlt(localctx, 6);
            this.state = 416;
            this.match(FIRRTLParser.T__48);
            this.state = 417;
            this.match(FIRRTLParser.T__22);
            this.state = 419; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 418;
                this.id();
                this.state = 421; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)))) !== 0) || _la===FIRRTLParser.Id);
            this.state = 423;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__49:
            this.enterOuterAlt(localctx, 7);
            this.state = 425;
            this.match(FIRRTLParser.T__49);
            this.state = 426;
            this.match(FIRRTLParser.T__22);
            this.state = 428; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 427;
                this.id();
                this.state = 430; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)))) !== 0) || _la===FIRRTLParser.Id);
            this.state = 432;
            this.match(FIRRTLParser.NEWLINE);
            break;
        case FIRRTLParser.T__50:
            this.enterOuterAlt(localctx, 8);
            this.state = 434;
            this.match(FIRRTLParser.T__50);
            this.state = 435;
            this.match(FIRRTLParser.T__22);
            this.state = 437; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 436;
                this.id();
                this.state = 439; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)))) !== 0) || _la===FIRRTLParser.Id);
            this.state = 441;
            this.match(FIRRTLParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_simple_stmt;
    return this;
}

Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;

Simple_stmtContext.prototype.stmt = function() {
    return this.getTypedRuleContext(StmtContext,0);
};

Simple_stmtContext.prototype.NEWLINE = function() {
    return this.getToken(FIRRTLParser.NEWLINE, 0);
};

Simple_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitSimple_stmt(this);
	}
};




FIRRTLParser.Simple_stmtContext = Simple_stmtContext;

FIRRTLParser.prototype.simple_stmt = function() {

    var localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, FIRRTLParser.RULE_simple_stmt);
    try {
        this.state = 447;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__0:
        case FIRRTLParser.T__2:
        case FIRRTLParser.T__3:
        case FIRRTLParser.T__4:
        case FIRRTLParser.T__5:
        case FIRRTLParser.T__6:
        case FIRRTLParser.T__9:
        case FIRRTLParser.T__10:
        case FIRRTLParser.T__11:
        case FIRRTLParser.T__12:
        case FIRRTLParser.T__17:
        case FIRRTLParser.T__20:
        case FIRRTLParser.T__21:
        case FIRRTLParser.T__25:
        case FIRRTLParser.T__26:
        case FIRRTLParser.T__27:
        case FIRRTLParser.T__28:
        case FIRRTLParser.T__29:
        case FIRRTLParser.T__30:
        case FIRRTLParser.T__31:
        case FIRRTLParser.T__32:
        case FIRRTLParser.T__33:
        case FIRRTLParser.T__34:
        case FIRRTLParser.T__37:
        case FIRRTLParser.T__38:
        case FIRRTLParser.T__39:
        case FIRRTLParser.T__40:
        case FIRRTLParser.T__41:
        case FIRRTLParser.T__42:
        case FIRRTLParser.T__44:
        case FIRRTLParser.T__48:
        case FIRRTLParser.T__49:
        case FIRRTLParser.T__50:
        case FIRRTLParser.T__51:
        case FIRRTLParser.T__52:
        case FIRRTLParser.T__53:
        case FIRRTLParser.T__54:
        case FIRRTLParser.T__55:
        case FIRRTLParser.T__56:
        case FIRRTLParser.T__57:
        case FIRRTLParser.T__58:
        case FIRRTLParser.T__59:
        case FIRRTLParser.T__61:
        case FIRRTLParser.T__62:
        case FIRRTLParser.T__63:
        case FIRRTLParser.T__64:
        case FIRRTLParser.T__65:
        case FIRRTLParser.T__66:
        case FIRRTLParser.T__67:
        case FIRRTLParser.T__68:
        case FIRRTLParser.T__69:
        case FIRRTLParser.T__70:
        case FIRRTLParser.T__71:
        case FIRRTLParser.T__72:
        case FIRRTLParser.T__73:
        case FIRRTLParser.T__74:
        case FIRRTLParser.T__75:
        case FIRRTLParser.T__76:
        case FIRRTLParser.T__77:
        case FIRRTLParser.T__78:
        case FIRRTLParser.T__79:
        case FIRRTLParser.T__80:
        case FIRRTLParser.T__81:
        case FIRRTLParser.T__82:
        case FIRRTLParser.T__83:
        case FIRRTLParser.T__84:
        case FIRRTLParser.T__85:
        case FIRRTLParser.T__86:
        case FIRRTLParser.T__87:
        case FIRRTLParser.T__88:
        case FIRRTLParser.T__89:
        case FIRRTLParser.T__90:
        case FIRRTLParser.T__91:
        case FIRRTLParser.T__92:
        case FIRRTLParser.T__93:
        case FIRRTLParser.T__94:
        case FIRRTLParser.T__95:
        case FIRRTLParser.T__96:
        case FIRRTLParser.T__97:
        case FIRRTLParser.T__98:
        case FIRRTLParser.T__99:
        case FIRRTLParser.T__100:
        case FIRRTLParser.T__101:
        case FIRRTLParser.T__102:
        case FIRRTLParser.Id:
            this.enterOuterAlt(localctx, 1);
            this.state = 445;
            this.stmt();
            break;
        case FIRRTLParser.NEWLINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 446;
            this.match(FIRRTLParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_suite;
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.simple_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_stmtContext);
    } else {
        return this.getTypedRuleContext(Simple_stmtContext,i);
    }
};

SuiteContext.prototype.INDENT = function() {
    return this.getToken(FIRRTLParser.INDENT, 0);
};

SuiteContext.prototype.DEDENT = function() {
    return this.getToken(FIRRTLParser.DEDENT, 0);
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitSuite(this);
	}
};




FIRRTLParser.SuiteContext = SuiteContext;

FIRRTLParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, FIRRTLParser.RULE_suite);
    var _la = 0; // Token type
    try {
        this.state = 458;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.T__0:
        case FIRRTLParser.T__2:
        case FIRRTLParser.T__3:
        case FIRRTLParser.T__4:
        case FIRRTLParser.T__5:
        case FIRRTLParser.T__6:
        case FIRRTLParser.T__9:
        case FIRRTLParser.T__10:
        case FIRRTLParser.T__11:
        case FIRRTLParser.T__12:
        case FIRRTLParser.T__17:
        case FIRRTLParser.T__20:
        case FIRRTLParser.T__21:
        case FIRRTLParser.T__25:
        case FIRRTLParser.T__26:
        case FIRRTLParser.T__27:
        case FIRRTLParser.T__28:
        case FIRRTLParser.T__29:
        case FIRRTLParser.T__30:
        case FIRRTLParser.T__31:
        case FIRRTLParser.T__32:
        case FIRRTLParser.T__33:
        case FIRRTLParser.T__34:
        case FIRRTLParser.T__37:
        case FIRRTLParser.T__38:
        case FIRRTLParser.T__39:
        case FIRRTLParser.T__40:
        case FIRRTLParser.T__41:
        case FIRRTLParser.T__42:
        case FIRRTLParser.T__44:
        case FIRRTLParser.T__48:
        case FIRRTLParser.T__49:
        case FIRRTLParser.T__50:
        case FIRRTLParser.T__51:
        case FIRRTLParser.T__52:
        case FIRRTLParser.T__53:
        case FIRRTLParser.T__54:
        case FIRRTLParser.T__55:
        case FIRRTLParser.T__56:
        case FIRRTLParser.T__57:
        case FIRRTLParser.T__58:
        case FIRRTLParser.T__59:
        case FIRRTLParser.T__61:
        case FIRRTLParser.T__62:
        case FIRRTLParser.T__63:
        case FIRRTLParser.T__64:
        case FIRRTLParser.T__65:
        case FIRRTLParser.T__66:
        case FIRRTLParser.T__67:
        case FIRRTLParser.T__68:
        case FIRRTLParser.T__69:
        case FIRRTLParser.T__70:
        case FIRRTLParser.T__71:
        case FIRRTLParser.T__72:
        case FIRRTLParser.T__73:
        case FIRRTLParser.T__74:
        case FIRRTLParser.T__75:
        case FIRRTLParser.T__76:
        case FIRRTLParser.T__77:
        case FIRRTLParser.T__78:
        case FIRRTLParser.T__79:
        case FIRRTLParser.T__80:
        case FIRRTLParser.T__81:
        case FIRRTLParser.T__82:
        case FIRRTLParser.T__83:
        case FIRRTLParser.T__84:
        case FIRRTLParser.T__85:
        case FIRRTLParser.T__86:
        case FIRRTLParser.T__87:
        case FIRRTLParser.T__88:
        case FIRRTLParser.T__89:
        case FIRRTLParser.T__90:
        case FIRRTLParser.T__91:
        case FIRRTLParser.T__92:
        case FIRRTLParser.T__93:
        case FIRRTLParser.T__94:
        case FIRRTLParser.T__95:
        case FIRRTLParser.T__96:
        case FIRRTLParser.T__97:
        case FIRRTLParser.T__98:
        case FIRRTLParser.T__99:
        case FIRRTLParser.T__100:
        case FIRRTLParser.T__101:
        case FIRRTLParser.T__102:
        case FIRRTLParser.Id:
        case FIRRTLParser.NEWLINE:
            this.enterOuterAlt(localctx, 1);
            this.state = 449;
            this.simple_stmt();
            break;
        case FIRRTLParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 450;
            this.match(FIRRTLParser.INDENT);
            this.state = 452; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 451;
                this.simple_stmt();
                this.state = 454; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__39 - 32)) | (1 << (FIRRTLParser.T__40 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__42 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)) | (1 << (FIRRTLParser.T__61 - 32)) | (1 << (FIRRTLParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)) | (1 << (FIRRTLParser.T__67 - 64)) | (1 << (FIRRTLParser.T__68 - 64)) | (1 << (FIRRTLParser.T__69 - 64)) | (1 << (FIRRTLParser.T__70 - 64)) | (1 << (FIRRTLParser.T__71 - 64)) | (1 << (FIRRTLParser.T__72 - 64)) | (1 << (FIRRTLParser.T__73 - 64)) | (1 << (FIRRTLParser.T__74 - 64)) | (1 << (FIRRTLParser.T__75 - 64)) | (1 << (FIRRTLParser.T__76 - 64)) | (1 << (FIRRTLParser.T__77 - 64)) | (1 << (FIRRTLParser.T__78 - 64)) | (1 << (FIRRTLParser.T__79 - 64)) | (1 << (FIRRTLParser.T__80 - 64)) | (1 << (FIRRTLParser.T__81 - 64)) | (1 << (FIRRTLParser.T__82 - 64)) | (1 << (FIRRTLParser.T__83 - 64)) | (1 << (FIRRTLParser.T__84 - 64)) | (1 << (FIRRTLParser.T__85 - 64)) | (1 << (FIRRTLParser.T__86 - 64)) | (1 << (FIRRTLParser.T__87 - 64)) | (1 << (FIRRTLParser.T__88 - 64)) | (1 << (FIRRTLParser.T__89 - 64)) | (1 << (FIRRTLParser.T__90 - 64)) | (1 << (FIRRTLParser.T__91 - 64)) | (1 << (FIRRTLParser.T__92 - 64)) | (1 << (FIRRTLParser.T__93 - 64)) | (1 << (FIRRTLParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FIRRTLParser.T__95 - 96)) | (1 << (FIRRTLParser.T__96 - 96)) | (1 << (FIRRTLParser.T__97 - 96)) | (1 << (FIRRTLParser.T__98 - 96)) | (1 << (FIRRTLParser.T__99 - 96)) | (1 << (FIRRTLParser.T__100 - 96)) | (1 << (FIRRTLParser.T__101 - 96)) | (1 << (FIRRTLParser.T__102 - 96)) | (1 << (FIRRTLParser.Id - 96)) | (1 << (FIRRTLParser.NEWLINE - 96)))) !== 0));
            this.state = 456;
            this.match(FIRRTLParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_when;
    return this;
}

WhenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenContext.prototype.constructor = WhenContext;

WhenContext.prototype.exp = function() {
    return this.getTypedRuleContext(ExpContext,0);
};

WhenContext.prototype.info = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InfoContext);
    } else {
        return this.getTypedRuleContext(InfoContext,i);
    }
};

WhenContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

WhenContext.prototype.when = function() {
    return this.getTypedRuleContext(WhenContext,0);
};

WhenContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterWhen(this);
	}
};

WhenContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitWhen(this);
	}
};




FIRRTLParser.WhenContext = WhenContext;

FIRRTLParser.prototype.when = function() {

    var localctx = new WhenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, FIRRTLParser.RULE_when);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.match(FIRRTLParser.T__51);
        this.state = 461;
        this.exp(0);
        this.state = 462;
        this.match(FIRRTLParser.T__1);
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FIRRTLParser.FileInfo) {
            this.state = 463;
            this.info();
        }

        this.state = 467;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 466;
            this.suite();

        }
        this.state = 480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        if(la_===1) {
            this.state = 469;
            this.match(FIRRTLParser.T__52);
            this.state = 478;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case FIRRTLParser.T__51:
                this.state = 470;
                this.when();
                break;
            case FIRRTLParser.T__1:
                this.state = 471;
                this.match(FIRRTLParser.T__1);
                this.state = 473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FIRRTLParser.FileInfo) {
                    this.state = 472;
                    this.info();
                }

                this.state = 476;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
                if(la_===1) {
                    this.state = 475;
                    this.suite();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InfoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_info;
    return this;
}

InfoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InfoContext.prototype.constructor = InfoContext;

InfoContext.prototype.FileInfo = function() {
    return this.getToken(FIRRTLParser.FileInfo, 0);
};

InfoContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterInfo(this);
	}
};

InfoContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitInfo(this);
	}
};




FIRRTLParser.InfoContext = InfoContext;

FIRRTLParser.prototype.info = function() {

    var localctx = new InfoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, FIRRTLParser.RULE_info);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(FIRRTLParser.FileInfo);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MdirContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_mdir;
    return this;
}

MdirContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MdirContext.prototype.constructor = MdirContext;


MdirContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterMdir(this);
	}
};

MdirContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitMdir(this);
	}
};




FIRRTLParser.MdirContext = MdirContext;

FIRRTLParser.prototype.mdir = function() {

    var localctx = new MdirContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, FIRRTLParser.RULE_mdir);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (FIRRTLParser.T__53 - 54)) | (1 << (FIRRTLParser.T__54 - 54)) | (1 << (FIRRTLParser.T__55 - 54)) | (1 << (FIRRTLParser.T__56 - 54)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RuwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_ruw;
    return this;
}

RuwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RuwContext.prototype.constructor = RuwContext;


RuwContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterRuw(this);
	}
};

RuwContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitRuw(this);
	}
};




FIRRTLParser.RuwContext = RuwContext;

FIRRTLParser.prototype.ruw = function() {

    var localctx = new RuwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, FIRRTLParser.RULE_ruw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (FIRRTLParser.T__57 - 58)) | (1 << (FIRRTLParser.T__58 - 58)) | (1 << (FIRRTLParser.T__59 - 58)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_exp;
    return this;
}

ExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpContext.prototype.constructor = ExpContext;

ExpContext.prototype.intLit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntLitContext);
    } else {
        return this.getTypedRuleContext(IntLitContext,i);
    }
};

ExpContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ExpContext.prototype.exp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpContext);
    } else {
        return this.getTypedRuleContext(ExpContext,i);
    }
};

ExpContext.prototype.primop = function() {
    return this.getTypedRuleContext(PrimopContext,0);
};

ExpContext.prototype.fieldId = function() {
    return this.getTypedRuleContext(FieldIdContext,0);
};

ExpContext.prototype.DoubleLit = function() {
    return this.getToken(FIRRTLParser.DoubleLit, 0);
};

ExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterExp(this);
	}
};

ExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitExp(this);
	}
};



FIRRTLParser.prototype.exp = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, FIRRTLParser.RULE_exp, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 538;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.state = 489;
            this.match(FIRRTLParser.T__6);
            this.state = 494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.T__7) {
                this.state = 490;
                this.match(FIRRTLParser.T__7);
                this.state = 491;
                this.intLit();
                this.state = 492;
                this.match(FIRRTLParser.T__8);
            }

            this.state = 496;
            this.match(FIRRTLParser.T__23);
            this.state = 497;
            this.intLit();
            this.state = 498;
            this.match(FIRRTLParser.T__24);
            break;

        case 2:
            this.state = 500;
            this.match(FIRRTLParser.T__9);
            this.state = 505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FIRRTLParser.T__7) {
                this.state = 501;
                this.match(FIRRTLParser.T__7);
                this.state = 502;
                this.intLit();
                this.state = 503;
                this.match(FIRRTLParser.T__8);
            }

            this.state = 507;
            this.match(FIRRTLParser.T__23);
            this.state = 508;
            this.intLit();
            this.state = 509;
            this.match(FIRRTLParser.T__24);
            break;

        case 3:
            this.state = 511;
            this.id();
            break;

        case 4:
            this.state = 512;
            this.match(FIRRTLParser.T__61);
            this.state = 513;
            this.exp(0);
            this.state = 514;
            this.exp(0);
            this.state = 515;
            this.exp(0);
            this.state = 516;
            this.match(FIRRTLParser.T__24);
            break;

        case 5:
            this.state = 518;
            this.match(FIRRTLParser.T__62);
            this.state = 519;
            this.exp(0);
            this.state = 520;
            this.exp(0);
            this.state = 521;
            this.match(FIRRTLParser.T__24);
            break;

        case 6:
            this.state = 523;
            this.primop();
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)) | (1 << (FIRRTLParser.T__61 - 32)) | (1 << (FIRRTLParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)) | (1 << (FIRRTLParser.T__67 - 64)) | (1 << (FIRRTLParser.T__68 - 64)) | (1 << (FIRRTLParser.T__69 - 64)) | (1 << (FIRRTLParser.T__70 - 64)) | (1 << (FIRRTLParser.T__71 - 64)) | (1 << (FIRRTLParser.T__72 - 64)) | (1 << (FIRRTLParser.T__73 - 64)) | (1 << (FIRRTLParser.T__74 - 64)) | (1 << (FIRRTLParser.T__75 - 64)) | (1 << (FIRRTLParser.T__76 - 64)) | (1 << (FIRRTLParser.T__77 - 64)) | (1 << (FIRRTLParser.T__78 - 64)) | (1 << (FIRRTLParser.T__79 - 64)) | (1 << (FIRRTLParser.T__80 - 64)) | (1 << (FIRRTLParser.T__81 - 64)) | (1 << (FIRRTLParser.T__82 - 64)) | (1 << (FIRRTLParser.T__83 - 64)) | (1 << (FIRRTLParser.T__84 - 64)) | (1 << (FIRRTLParser.T__85 - 64)) | (1 << (FIRRTLParser.T__86 - 64)) | (1 << (FIRRTLParser.T__87 - 64)) | (1 << (FIRRTLParser.T__88 - 64)) | (1 << (FIRRTLParser.T__89 - 64)) | (1 << (FIRRTLParser.T__90 - 64)) | (1 << (FIRRTLParser.T__91 - 64)) | (1 << (FIRRTLParser.T__92 - 64)) | (1 << (FIRRTLParser.T__93 - 64)) | (1 << (FIRRTLParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (FIRRTLParser.T__95 - 96)) | (1 << (FIRRTLParser.T__96 - 96)) | (1 << (FIRRTLParser.T__97 - 96)) | (1 << (FIRRTLParser.T__98 - 96)) | (1 << (FIRRTLParser.T__99 - 96)) | (1 << (FIRRTLParser.T__100 - 96)) | (1 << (FIRRTLParser.T__101 - 96)) | (1 << (FIRRTLParser.T__102 - 96)) | (1 << (FIRRTLParser.Id - 96)))) !== 0)) {
                this.state = 524;
                this.exp(0);
                this.state = 529;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (FIRRTLParser.UnsignedInt - 104)) | (1 << (FIRRTLParser.SignedInt - 104)) | (1 << (FIRRTLParser.HexLit - 104)))) !== 0)) {
                this.state = 530;
                this.intLit();
                this.state = 535;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 536;
            this.match(FIRRTLParser.T__24);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 558;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 556;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FIRRTLParser.RULE_exp);
                    this.state = 540;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 541;
                    this.match(FIRRTLParser.T__60);
                    this.state = 542;
                    this.fieldId();
                    break;

                case 2:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FIRRTLParser.RULE_exp);
                    this.state = 543;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 544;
                    this.match(FIRRTLParser.T__60);
                    this.state = 545;
                    this.match(FIRRTLParser.DoubleLit);
                    break;

                case 3:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FIRRTLParser.RULE_exp);
                    this.state = 546;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 547;
                    this.match(FIRRTLParser.T__15);
                    this.state = 548;
                    this.intLit();
                    this.state = 549;
                    this.match(FIRRTLParser.T__16);
                    break;

                case 4:
                    localctx = new ExpContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FIRRTLParser.RULE_exp);
                    this.state = 551;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 552;
                    this.match(FIRRTLParser.T__15);
                    this.state = 553;
                    this.exp(0);
                    this.state = 554;
                    this.match(FIRRTLParser.T__16);
                    break;

                } 
            }
            this.state = 560;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.Id = function() {
    return this.getToken(FIRRTLParser.Id, 0);
};

IdContext.prototype.keywordAsId = function() {
    return this.getTypedRuleContext(KeywordAsIdContext,0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitId(this);
	}
};




FIRRTLParser.IdContext = IdContext;

FIRRTLParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, FIRRTLParser.RULE_id);
    try {
        this.state = 563;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.Id:
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.match(FIRRTLParser.Id);
            break;
        case FIRRTLParser.T__0:
        case FIRRTLParser.T__2:
        case FIRRTLParser.T__3:
        case FIRRTLParser.T__4:
        case FIRRTLParser.T__5:
        case FIRRTLParser.T__6:
        case FIRRTLParser.T__9:
        case FIRRTLParser.T__10:
        case FIRRTLParser.T__11:
        case FIRRTLParser.T__12:
        case FIRRTLParser.T__17:
        case FIRRTLParser.T__20:
        case FIRRTLParser.T__21:
        case FIRRTLParser.T__25:
        case FIRRTLParser.T__26:
        case FIRRTLParser.T__27:
        case FIRRTLParser.T__28:
        case FIRRTLParser.T__29:
        case FIRRTLParser.T__30:
        case FIRRTLParser.T__31:
        case FIRRTLParser.T__32:
        case FIRRTLParser.T__33:
        case FIRRTLParser.T__34:
        case FIRRTLParser.T__37:
        case FIRRTLParser.T__38:
        case FIRRTLParser.T__41:
        case FIRRTLParser.T__44:
        case FIRRTLParser.T__48:
        case FIRRTLParser.T__49:
        case FIRRTLParser.T__50:
        case FIRRTLParser.T__51:
        case FIRRTLParser.T__52:
        case FIRRTLParser.T__53:
        case FIRRTLParser.T__54:
        case FIRRTLParser.T__55:
        case FIRRTLParser.T__56:
        case FIRRTLParser.T__57:
        case FIRRTLParser.T__58:
        case FIRRTLParser.T__59:
        case FIRRTLParser.T__63:
        case FIRRTLParser.T__64:
        case FIRRTLParser.T__65:
        case FIRRTLParser.T__66:
            this.enterOuterAlt(localctx, 2);
            this.state = 562;
            this.keywordAsId();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_fieldId;
    return this;
}

FieldIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldIdContext.prototype.constructor = FieldIdContext;

FieldIdContext.prototype.Id = function() {
    return this.getToken(FIRRTLParser.Id, 0);
};

FieldIdContext.prototype.RelaxedId = function() {
    return this.getToken(FIRRTLParser.RelaxedId, 0);
};

FieldIdContext.prototype.UnsignedInt = function() {
    return this.getToken(FIRRTLParser.UnsignedInt, 0);
};

FieldIdContext.prototype.keywordAsId = function() {
    return this.getTypedRuleContext(KeywordAsIdContext,0);
};

FieldIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterFieldId(this);
	}
};

FieldIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitFieldId(this);
	}
};




FIRRTLParser.FieldIdContext = FieldIdContext;

FIRRTLParser.prototype.fieldId = function() {

    var localctx = new FieldIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, FIRRTLParser.RULE_fieldId);
    try {
        this.state = 569;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FIRRTLParser.Id:
            this.enterOuterAlt(localctx, 1);
            this.state = 565;
            this.match(FIRRTLParser.Id);
            break;
        case FIRRTLParser.RelaxedId:
            this.enterOuterAlt(localctx, 2);
            this.state = 566;
            this.match(FIRRTLParser.RelaxedId);
            break;
        case FIRRTLParser.UnsignedInt:
            this.enterOuterAlt(localctx, 3);
            this.state = 567;
            this.match(FIRRTLParser.UnsignedInt);
            break;
        case FIRRTLParser.T__0:
        case FIRRTLParser.T__2:
        case FIRRTLParser.T__3:
        case FIRRTLParser.T__4:
        case FIRRTLParser.T__5:
        case FIRRTLParser.T__6:
        case FIRRTLParser.T__9:
        case FIRRTLParser.T__10:
        case FIRRTLParser.T__11:
        case FIRRTLParser.T__12:
        case FIRRTLParser.T__17:
        case FIRRTLParser.T__20:
        case FIRRTLParser.T__21:
        case FIRRTLParser.T__25:
        case FIRRTLParser.T__26:
        case FIRRTLParser.T__27:
        case FIRRTLParser.T__28:
        case FIRRTLParser.T__29:
        case FIRRTLParser.T__30:
        case FIRRTLParser.T__31:
        case FIRRTLParser.T__32:
        case FIRRTLParser.T__33:
        case FIRRTLParser.T__34:
        case FIRRTLParser.T__37:
        case FIRRTLParser.T__38:
        case FIRRTLParser.T__41:
        case FIRRTLParser.T__44:
        case FIRRTLParser.T__48:
        case FIRRTLParser.T__49:
        case FIRRTLParser.T__50:
        case FIRRTLParser.T__51:
        case FIRRTLParser.T__52:
        case FIRRTLParser.T__53:
        case FIRRTLParser.T__54:
        case FIRRTLParser.T__55:
        case FIRRTLParser.T__56:
        case FIRRTLParser.T__57:
        case FIRRTLParser.T__58:
        case FIRRTLParser.T__59:
        case FIRRTLParser.T__63:
        case FIRRTLParser.T__64:
        case FIRRTLParser.T__65:
        case FIRRTLParser.T__66:
            this.enterOuterAlt(localctx, 4);
            this.state = 568;
            this.keywordAsId();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntLitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_intLit;
    return this;
}

IntLitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntLitContext.prototype.constructor = IntLitContext;

IntLitContext.prototype.UnsignedInt = function() {
    return this.getToken(FIRRTLParser.UnsignedInt, 0);
};

IntLitContext.prototype.SignedInt = function() {
    return this.getToken(FIRRTLParser.SignedInt, 0);
};

IntLitContext.prototype.HexLit = function() {
    return this.getToken(FIRRTLParser.HexLit, 0);
};

IntLitContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterIntLit(this);
	}
};

IntLitContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitIntLit(this);
	}
};




FIRRTLParser.IntLitContext = IntLitContext;

FIRRTLParser.prototype.intLit = function() {

    var localctx = new IntLitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, FIRRTLParser.RULE_intLit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        _la = this._input.LA(1);
        if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (FIRRTLParser.UnsignedInt - 104)) | (1 << (FIRRTLParser.SignedInt - 104)) | (1 << (FIRRTLParser.HexLit - 104)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordAsIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_keywordAsId;
    return this;
}

KeywordAsIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordAsIdContext.prototype.constructor = KeywordAsIdContext;


KeywordAsIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterKeywordAsId(this);
	}
};

KeywordAsIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitKeywordAsId(this);
	}
};




FIRRTLParser.KeywordAsIdContext = KeywordAsIdContext;

FIRRTLParser.prototype.keywordAsId = function() {

    var localctx = new KeywordAsIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, FIRRTLParser.RULE_keywordAsId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FIRRTLParser.T__0) | (1 << FIRRTLParser.T__2) | (1 << FIRRTLParser.T__3) | (1 << FIRRTLParser.T__4) | (1 << FIRRTLParser.T__5) | (1 << FIRRTLParser.T__6) | (1 << FIRRTLParser.T__9) | (1 << FIRRTLParser.T__10) | (1 << FIRRTLParser.T__11) | (1 << FIRRTLParser.T__12) | (1 << FIRRTLParser.T__17) | (1 << FIRRTLParser.T__20) | (1 << FIRRTLParser.T__21) | (1 << FIRRTLParser.T__25) | (1 << FIRRTLParser.T__26) | (1 << FIRRTLParser.T__27) | (1 << FIRRTLParser.T__28) | (1 << FIRRTLParser.T__29) | (1 << FIRRTLParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FIRRTLParser.T__31 - 32)) | (1 << (FIRRTLParser.T__32 - 32)) | (1 << (FIRRTLParser.T__33 - 32)) | (1 << (FIRRTLParser.T__34 - 32)) | (1 << (FIRRTLParser.T__37 - 32)) | (1 << (FIRRTLParser.T__38 - 32)) | (1 << (FIRRTLParser.T__41 - 32)) | (1 << (FIRRTLParser.T__44 - 32)) | (1 << (FIRRTLParser.T__48 - 32)) | (1 << (FIRRTLParser.T__49 - 32)) | (1 << (FIRRTLParser.T__50 - 32)) | (1 << (FIRRTLParser.T__51 - 32)) | (1 << (FIRRTLParser.T__52 - 32)) | (1 << (FIRRTLParser.T__53 - 32)) | (1 << (FIRRTLParser.T__54 - 32)) | (1 << (FIRRTLParser.T__55 - 32)) | (1 << (FIRRTLParser.T__56 - 32)) | (1 << (FIRRTLParser.T__57 - 32)) | (1 << (FIRRTLParser.T__58 - 32)) | (1 << (FIRRTLParser.T__59 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (FIRRTLParser.T__63 - 64)) | (1 << (FIRRTLParser.T__64 - 64)) | (1 << (FIRRTLParser.T__65 - 64)) | (1 << (FIRRTLParser.T__66 - 64)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FIRRTLParser.RULE_primop;
    return this;
}

PrimopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimopContext.prototype.constructor = PrimopContext;


PrimopContext.prototype.enterRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.enterPrimop(this);
	}
};

PrimopContext.prototype.exitRule = function(listener) {
    if(listener instanceof FIRRTLListener ) {
        listener.exitPrimop(this);
	}
};




FIRRTLParser.PrimopContext = PrimopContext;

FIRRTLParser.prototype.primop = function() {

    var localctx = new PrimopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, FIRRTLParser.RULE_primop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        _la = this._input.LA(1);
        if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (FIRRTLParser.T__67 - 68)) | (1 << (FIRRTLParser.T__68 - 68)) | (1 << (FIRRTLParser.T__69 - 68)) | (1 << (FIRRTLParser.T__70 - 68)) | (1 << (FIRRTLParser.T__71 - 68)) | (1 << (FIRRTLParser.T__72 - 68)) | (1 << (FIRRTLParser.T__73 - 68)) | (1 << (FIRRTLParser.T__74 - 68)) | (1 << (FIRRTLParser.T__75 - 68)) | (1 << (FIRRTLParser.T__76 - 68)) | (1 << (FIRRTLParser.T__77 - 68)) | (1 << (FIRRTLParser.T__78 - 68)) | (1 << (FIRRTLParser.T__79 - 68)) | (1 << (FIRRTLParser.T__80 - 68)) | (1 << (FIRRTLParser.T__81 - 68)) | (1 << (FIRRTLParser.T__82 - 68)) | (1 << (FIRRTLParser.T__83 - 68)) | (1 << (FIRRTLParser.T__84 - 68)) | (1 << (FIRRTLParser.T__85 - 68)) | (1 << (FIRRTLParser.T__86 - 68)) | (1 << (FIRRTLParser.T__87 - 68)) | (1 << (FIRRTLParser.T__88 - 68)) | (1 << (FIRRTLParser.T__89 - 68)) | (1 << (FIRRTLParser.T__90 - 68)) | (1 << (FIRRTLParser.T__91 - 68)) | (1 << (FIRRTLParser.T__92 - 68)) | (1 << (FIRRTLParser.T__93 - 68)) | (1 << (FIRRTLParser.T__94 - 68)) | (1 << (FIRRTLParser.T__95 - 68)) | (1 << (FIRRTLParser.T__96 - 68)) | (1 << (FIRRTLParser.T__97 - 68)) | (1 << (FIRRTLParser.T__98 - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (FIRRTLParser.T__99 - 100)) | (1 << (FIRRTLParser.T__100 - 100)) | (1 << (FIRRTLParser.T__101 - 100)) | (1 << (FIRRTLParser.T__102 - 100)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


FIRRTLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 4:
			return this.type_sempred(localctx, predIndex);
	case 20:
			return this.exp_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

FIRRTLParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FIRRTLParser.prototype.exp_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 7);
		case 2:
			return this.precpred(this._ctx, 6);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.FIRRTLParser = FIRRTLParser;
